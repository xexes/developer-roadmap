{
  "NEnna_8DstfYH4T9qrP3-": {
    "title": "General Development Skills",
    "description": "There are several skills that are generally considered to be important for working with .NET and C#:\n\n*   Object-oriented programming: Understanding the concepts of classes, objects, inheritance, and polymorphism is essential for working with C# and the .NET Framework.\n    \n*   C# language: A strong understanding of the C# language, including its syntax, keywords, and built-in classes and types, is necessary for writing efficient and maintainable code.\n    \n*   .NET Framework: Familiarity with the .NET Framework, including the Common Language Runtime (CLR) and the Base Class Library (BCL), is important for understanding how C# code is executed and for utilizing the framework's many built-in features.\n    \n*   Web & Software development: Knowledge of web development technologies such as HTML, CSS, JavaScript, and [ASP.NET](http://ASP.NET) is important for creating web applications using C# and the .NET Framework and knowledge of software development methodologies such as Agile, Scrum, or Waterfall is also useful.\n    \n*   Database: Familiarity with database concepts and technologies, such as SQL and [ADO.NET](http://ADO.NET), is important for working with data in C# applications.\n    \n*   Cloud computing: Familiarity with cloud computing concepts and technologies, such as Azure, is becoming increasingly important for deploying and scaling C# applications.\n    \n*   DevOps: Understanding of DevOps concepts and practices, such as continuous integration and continuous deployment, is necessary for automating and streamlining the software development process.\n    \n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Explore top posts about Career",
        "url": "https://app.daily.dev/tags/career?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Asp.net - Complete Tutorial",
        "url": "https://www.youtube.com/watch?v=kdPtNMb8tPw",
        "type": "video"
      },
      {
        "title": "Learn Cloud Computing",
        "url": "https://www.youtube.com/watch?v=eWwK2FKWp0g",
        "type": "video"
      },
      {
        "title": "DevOps Course for Beginners",
        "url": "https://www.youtube.com/watch?v=hQcFE0RD0cQ",
        "type": "video"
      }
    ]
  },
  "fxANnSiTb2VzA9u-YeBL1": {
    "title": "C#",
    "description": "C# is a modern coding language that was developed by Microsoft that focuses on applying the coding style to C++ and making it so that way it's more condensed and simple. It's similar to Java by both being static, strong, and manifestive languages. Both use the System's prebuilt class to do certain features like printing output to the screen, etc.C#, like Java, also contains a garbage collection, which removes lower-level maintenance code from the programmer.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "C# official website?",
        "url": "https://learn.microsoft.com/en-us/dotnet/csharp//",
        "type": "article"
      },
      {
        "title": "The Beginners Guide to C#",
        "url": "https://www.w3schools.com/CS/index.php",
        "type": "article"
      },
      {
        "title": "C# Tutorial",
        "url": "https://www.w3schools.com/cs/index.php",
        "type": "article"
      },
      {
        "title": "Explore top posts about C#",
        "url": "https://app.daily.dev/tags/csharp?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "C# Full Course - Learn C# 10 and .NET 6 in 7 hours",
        "url": "https://www.youtube.com/watch?v=q_F4PyW8GTg",
        "type": "video"
      }
    ]
  },
  "3GGvuxdfuDwLpNX_gtjCK": {
    "title": ".NET",
    "description": ".NET (pronounced \"dot net\") is a software framework developed by Microsoft that can be used to create a wide range of applications, including Windows desktop and web applications, mobile apps, and gaming. The .NET Framework provides a large library of pre-built functionality, including collections, file input/output, and networking, that can be used by .NET applications. It also includes a Common Language Runtime (CLR) which manages the execution of code, providing features such as memory management, security, and exception handling.\n\nFor more information, visit the following link:",
    "links": [
      {
        "title": "What is .NET?",
        "url": "https://dotnet.microsoft.com/en-us/learn/dotnet/what-is-dotnet",
        "type": "article"
      },
      {
        "title": "An Overview of .NET",
        "url": "https://auth0.com/blog/what-is-dotnet-platform-overview/",
        "type": "article"
      },
      {
        "title": "Explore top posts about .NET",
        "url": "https://app.daily.dev/tags/.net?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "6HJQ1Evgah0Pki04Z2hQt": {
    "title": ".NET CLI",
    "description": ".NET CLI is the command-line interface (CLI) for the .NET platform. It is a tool that provides a common interface for running .NET Core command-line tools and utilities. .NET Core is a cross-platform, open-source, and modular version of the .NET framework, and the .NET CLI provides a way to interact with it from the command line.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Microsoft - .NET CLI overview",
        "url": "https://learn.microsoft.com/en-us/dotnet/core/tools/",
        "type": "article"
      },
      {
        "title": "Explore top posts about CLI",
        "url": "https://app.daily.dev/tags/cli?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Intro To The .NET CLI",
        "url": "https://youtu.be/RQLzp2Z8-BE",
        "type": "video"
      }
    ]
  },
  "NvODRFR0DLINB0RlPSsvt": {
    "title": "Learn the Basics of C#",
    "description": "C# (pronounced \"C-sharp\") is a general-purpose, object-oriented programming language developed by Microsoft. It is part of the .NET family of languages and is used to build a wide range of applications, from web and mobile applications to games and cloud services.\n\nC# is a statically-typed language, which means that the type of a variable must be specified when it is declared, and that the type of a value cannot be changed after it has been assigned. C# also supports object-oriented programming, which means that it provides features such as encapsulation, inheritance, and polymorphism.\n\nC# is a popular language for building .NET applications, and it is used by many large companies and organizations, including Microsoft, Dell, and IBM. It is a versatile language that can be used for a wide range of purposes, and it is well-suited for building scalable and maintainable software systems.\n\nVisit the following links for more information:",
    "links": [
      {
        "title": "Introduction to C#",
        "url": "https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/tutorials/",
        "type": "article"
      },
      {
        "title": "Basics Of C#",
        "url": "https://www.c-sharpcorner.com/UploadFile/e9fdcd/basics-of-C-Sharp/",
        "type": "article"
      },
      {
        "title": "C# Tutorials",
        "url": "https://dotnettutorials.net/course/csharp-dot-net-tutorials/",
        "type": "article"
      },
      {
        "title": "C# tutorials - W3Schools",
        "url": "https://www.w3schools.com/cs/index.php",
        "type": "article"
      },
      {
        "title": "Explore top posts about C#",
        "url": "https://app.daily.dev/tags/csharp?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "OtdCmkj0SvrGwCUSfm96C": {
    "title": "Git - Version Control",
    "description": "[Git](https://git-scm.com/) is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Learn Git with Tutorials, News and Tips - Atlassian",
        "url": "https://www.atlassian.com/git",
        "type": "article"
      },
      {
        "title": "Git Cheat Sheet",
        "url": "https://cs.fyi/guide/git-cheatsheet",
        "type": "article"
      },
      {
        "title": "Explore top posts about Git",
        "url": "https://app.daily.dev/tags/git?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Git & GitHub Crash Course For Beginners",
        "url": "https://www.youtube.com/watch?v=SWYqp7iY_Tc",
        "type": "video"
      }
    ]
  },
  "KAZF-mIg-FlfMonfdOLhb": {
    "title": "GitHub, GitLab, BitBucket",
    "description": "There are different repository hosting services with the most famous one being GitHub, GitLab and BitBucket. I would recommend creating an account on GitHub because that is where most of the OpenSource work is done and most of the developers are.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "GitHub: Where the world builds software",
        "url": "https://github.com",
        "type": "opensource"
      },
      {
        "title": "GitLab: Iterate faster, innovate together",
        "url": "https://gitlab.com",
        "type": "opensource"
      },
      {
        "title": "BitBucket: The Git solution for professional teams",
        "url": "https://bitbucket.com",
        "type": "article"
      }
    ]
  },
  "YI3cAezupWNntFw4B6elY": {
    "title": "HTTP / HTTPs Protocol",
    "description": "HTTP is the `TCP/IP` based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet.\n\nHTTPS\n=====\n\nHTTPS (**H**ypertext **T**ransfer **P**rotocol **S**ecure) is the secure version of HTTP, which is the primary protocol used to send data between a web browser and a website.\n\n`HTTPS = HTTP + SSL/TLS`\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Everything you need to know about HTTP",
        "url": "https://cs.fyi/guide/http-in-depth",
        "type": "article"
      },
      {
        "title": "What is HTTP?",
        "url": "https://www.cloudflare.com/en-gb/learning/ddos/glossary/hypertext-transfer-protocol-http/",
        "type": "article"
      },
      {
        "title": "An overview of HTTP",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview",
        "type": "article"
      },
      {
        "title": "HTTP/3 From A To Z: Core Concepts",
        "url": "https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/",
        "type": "article"
      },
      {
        "title": "What is HTTPS?",
        "url": "https://www.cloudflare.com/en-gb/learning/ssl/what-is-https/",
        "type": "article"
      },
      {
        "title": "Why HTTPS Matters",
        "url": "https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https",
        "type": "article"
      },
      {
        "title": "Enabling HTTPS on Your Servers",
        "url": "https://web.dev/enable-https/",
        "type": "article"
      },
      {
        "title": "How HTTPS works (comic)",
        "url": "https://howhttps.works/",
        "type": "article"
      },
      {
        "title": "HTTP Crash Course & Exploration",
        "url": "https://www.youtube.com/watch?v=iYM2zFP3Zn0",
        "type": "video"
      }
    ]
  },
  "RAX2xN37taw9cqA3pnORh": {
    "title": "Data Structures and Algorithms",
    "description": "As the name indicates, a **Data Structure** is a way of organizing the data in the **memory** so it can be used efficiently. Some common data structures are array, linked list, stack, hashtable, queue, tree, heap, and graph.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "C# resources",
        "url": "https://dev.to/adavidoaiei/fundamental-data-structures-and-algorithms-in-c-4ocf",
        "type": "article"
      },
      {
        "title": "Interview Questions about Data Structures",
        "url": "https://www.csharpstar.com/csharp-algorithms/",
        "type": "article"
      },
      {
        "title": "Explore top posts about Algorithms",
        "url": "https://app.daily.dev/tags/algorithms?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Data Structures Illustrated",
        "url": "https://www.youtube.com/watch?v=9rhT3P1MDHk&list=PLkZYeFmDuaN2-KUIv-mvbjfKszIGJ4FaY",
        "type": "video"
      }
    ]
  },
  "tnKUdsgp6bnFtQTexEmfy": {
    "title": "Database Fundamentals",
    "description": "A database is a collection of useful data of one or more related organizations structured in a way to make data an asset to the organization. A database management system is a software designed to assist in maintaining and extracting large collections of data in a timely fashion.\n\nA **Relational database** is a type of database that stores and provides access to data points that are related to one another. Relational databases store data in a series of tables.\n\n**NoSQL databases** offer data storage and retrieval that is modelled differently to \"traditional\" relational databases. NoSQL databases typically focus more on horizontal scaling, eventual consistency, speed and flexibility and is used commonly for big data and real-time streaming applications.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Oracle: What is a Database?",
        "url": "https://www.oracle.com/database/what-is-database/",
        "type": "article"
      },
      {
        "title": "Prisma.io: What are Databases?",
        "url": "https://www.prisma.io/dataguide/intro/what-are-databases",
        "type": "article"
      },
      {
        "title": "Intro To Relational Databases",
        "url": "https://www.udacity.com/course/intro-to-relational-databases--ud197",
        "type": "article"
      },
      {
        "title": "NoSQL Explained",
        "url": "https://www.mongodb.com/nosql-explained",
        "type": "article"
      },
      {
        "title": "Explore top posts about Database",
        "url": "https://app.daily.dev/tags/database?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "What is Relational Database",
        "url": "https://youtu.be/OqjJjpjDRLc",
        "type": "video"
      },
      {
        "title": "How do NoSQL Databases work",
        "url": "https://www.youtube.com/watch?v=0buKQHokLK8",
        "type": "video"
      }
    ]
  },
  "aOJMVrTcA_I2y_QHzj7aM": {
    "title": "SQL Basics",
    "description": "SQL stands for Structured Query Language. SQL lets you access and manipulate databases SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987.\n\nAlthough SQL is an ANSI/ISO standard, there are different versions of the SQL language.\n\nHowever, to be compliant with the ANSI standard, they all support at least the major commands (such as SELECT, UPDATE, DELETE, INSERT, WHERE) in a similar manner.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Introduction to SQL",
        "url": "https://www.w3schools.com/sql/sql_intro.asp",
        "type": "article"
      },
      {
        "title": "Explore top posts about SQL",
        "url": "https://app.daily.dev/tags/sql?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "SQL Tutorial - Full Database Course for Beginners",
        "url": "https://www.youtube.com/watch?v=HXV3zeQKqGY",
        "type": "video"
      }
    ]
  },
  "zlAcgLKxGF_TyrcJIk4X7": {
    "title": "Database Design Basics",
    "description": "Database Design is a collection of processes that facilitate the designing, development, implementation and maintenance of enterprise data management systems. Properly designed database are easy to maintain, improves data consistency and are cost effective in terms of disk storage space. The main objectives of database design in DBMS are to produce logical and physical designs models of the proposed database system.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Database design basics",
        "url": "https://support.microsoft.com/en-us/office/database-design-basics-eb2159cf-1e30-401a-8084-bd4f9c9ca1f5",
        "type": "article"
      },
      {
        "title": "Explore top posts about Database",
        "url": "https://app.daily.dev/tags/database?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Database Design Course",
        "url": "https://www.youtube.com/watch?v=ztHopE5Wnpc",
        "type": "video"
      }
    ]
  },
  "ZiK-c9zNbi5RZkKUi44wP": {
    "title": "Stored Procedures",
    "description": "A stored procedure is a pre-compiled collection of SQL statements that can be executed on a database server. Stored procedures are typically used to perform specific tasks, such as retrieving data from a database, inserting or updating data, or performing complex calculations. They are stored on the database server and can be called or executed from a client application or other stored procedures. Stored procedures can improve database performance by reducing the amount of SQL code needed to be executed and allowing developers to reuse common pieces of code. They can also provide security by allowing database administrators to control which users have access to specific stored procedures.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Stored Procedure Tutorial",
        "url": "https://www.w3schools.com/sql/sql_stored_procedures.asp",
        "type": "article"
      },
      {
        "title": "Stored Procedure in SQL: Benefits And How to Create It",
        "url": "https://www.simplilearn.com/tutorials/sql-tutorial/stored-procedure-in-sql",
        "type": "article"
      },
      {
        "title": "SQL Server stored procedures for beginners",
        "url": "https://www.sqlshack.com/sql-server-stored-procedures-for-beginners/",
        "type": "article"
      }
    ]
  },
  "1-XdtrGPbUoxpu9ZcQlBA": {
    "title": "Constraints",
    "description": "Database constraints are rules that are used to limit the data that can be stored in a database table. These constraints can be used to ensure the integrity and accuracy of the data in the table, and they can be used to enforce business rules or other requirements. For example, a constraint might be used to ensure that a column only contains positive numbers, or to ensure that a column always has a unique value. Constraints can be specified at the time a table is created, or they can be added to an existing table. Some common types of constraints include primary keys, foreign keys, and NOT NULL constraints.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "SQL Constraints",
        "url": "https://www.w3schools.com/sql/sql_constraints.asp",
        "type": "article"
      },
      {
        "title": "Constraints of SQL",
        "url": "https://www.educative.io/courses/database-design-fundamentals/m7JnY9Xm6Qp",
        "type": "article"
      },
      {
        "title": "Constraints in DBMS",
        "url": "https://beginnersbook.com/2015/04/constraints-in-dbms/",
        "type": "article"
      }
    ]
  },
  "2f_CJMnXwPxjMEwm5P_QJ": {
    "title": "Triggers",
    "description": "Triggers are special type of stored procedures that are automatically executed in response to specific events that occur within a database. These events can include:\n\n*   Data modification events (INSERT, UPDATE, DELETE) on a specific table or view.\n*   Data definition events (CREATE, ALTER, DROP) on specific database objects such as tables or views.\n*   Logon events (CONNECT, DISCONNECT) that occur when a user connects to or disconnects from the database.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Database Triggers",
        "url": "https://docs.oracle.com/cd/A57673_01/DOC/server/doc/SCN73/ch15.htm",
        "type": "article"
      },
      {
        "title": "Database Triggers: Examples & Overview",
        "url": "https://study.com/academy/lesson/database-triggers-examples-overview.html",
        "type": "article"
      },
      {
        "title": "What are Triggers in SQL?",
        "url": "https://www.edureka.co/blog/triggers-in-sql/",
        "type": "article"
      },
      {
        "title": "What is a SQL Trigger?",
        "url": "https://www.essentialsql.com/sql-trigger/",
        "type": "article"
      }
    ]
  },
  "v2ZTCQQFQPoJNhOVGMG2g": {
    "title": "ASP.NET Core Basics",
    "description": "[ASP.NET](http://ASP.NET) Core is a open-source, cross-platform web framework for building modern web applications using .NET. Some of the basics of [ASP.NET](http://ASP.NET) Core are Cross-platform, Open-source, Modular, High performance, MVC pattern, Dependency Injection, Middleware, Razor Pages and Razor Components, EF Core.\n\nFor more information, visit the following resources:",
    "links": [
      {
        "title": "ASP.NET documentation",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "ASP.NET Core Tutorial",
        "url": "https://www.tutorialspoint.com/asp.net_core/index.htm",
        "type": "article"
      },
      {
        "title": "Learn ASP.NET Core from Scratch",
        "url": "https://www.tutorialsteacher.com/core",
        "type": "article"
      },
      {
        "title": "Explore top posts about ASP.NET",
        "url": "https://app.daily.dev/tags/aspnet?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "D3aQw0-pk3ycO-n10HBaA": {
    "title": "MVC",
    "description": "MVC is an architectural design pattern used for developing applications, specifically web applications. This pattern separates an application into three main logical components **Model View Controller**. Each architectural component is built to handle specific development aspects of an application.\n\n*   **Model** - Handles all data-related logic. Interacts with Database.\n*   **View** - Handles UI part of the applications (data presentation).\n*   **Controller** - Handles request flow, and acts as an intermediary between view and model.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "MVC Official Documentation",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/mvc/overview?WT.mc_id=dotnet-35129-website&view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "ASP.NET MVC Architecture",
        "url": "https://www.tutorialsteacher.com/mvc/mvc-architecture",
        "type": "article"
      },
      {
        "title": "MVC Framework - Introduction",
        "url": "https://www.tutorialspoint.com/mvc_framework/mvc_framework_introduction.htm",
        "type": "article"
      }
    ]
  },
  "dZ9fYWMBa1OemTmLOI8_q": {
    "title": "REST",
    "description": "REST (Representational State Transfer) is an architectural style for building web services. In the context of .NET, RESTful web services can be created using the [ASP.NET](http://ASP.NET) Web API framework, which allows developers to create HTTP-based services that can be consumed by a wide range of clients, including web browsers and mobile devices. The Web API framework provides a set of tools and libraries for creating RESTful services, including routing, request/response handling, and support for a variety of data formats, such as JSON and XML.\n\nFor more information, visit the following resources:",
    "links": [
      {
        "title": "What is REST Services?",
        "url": "http://www.codedigest.com/quick-start/16/what-is-rest-services-how-to-create-rest-services-in-aspnet",
        "type": "article"
      },
      {
        "title": "Restful API In ASP.NET: Introduction of REST & Web API",
        "url": "https://www.c-sharpcorner.com/UploadFile/4b0136/restful-api-in-Asp-Net-introduction-of-rest-web-api/",
        "type": "article"
      },
      {
        "title": "What are RESTful APIs",
        "url": "https://www.pragimtech.com/blog/blazor/what-are-restful-apis/",
        "type": "article"
      },
      {
        "title": "Explore top posts about REST API",
        "url": "https://app.daily.dev/tags/rest-api?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "qpVxwuyA2oE06MZLtEdP1": {
    "title": "Razor Pages",
    "description": "Razor Pages is a feature of the [ASP.NET](http://ASP.NET) Core framework that allows developers to build web applications using a combination of Razor markup (a markup syntax for defining dynamic HTML) and C# code. Razor Pages is built on top of the [ASP.NET](http://ASP.NET) Core MVC (Model-View-Controller) framework, and provides a simpler, more intuitive way to build web pages and handle user input.\n\nRazor Pages are useful for building simple, self-contained web pages that do not require a complex navigation or layout structure, and are often used for building small to medium-size web applications.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Basics of Razor Pages",
        "url": "https://www.jetbrains.com/dotnet/guide/tutorials/basics/razor-pages/",
        "type": "article"
      },
      {
        "title": "Get started with Razor Pages in ASP.NET Core",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "What Is Razor Pages?",
        "url": "https://www.learnrazorpages.com/",
        "type": "article"
      }
    ]
  },
  "vePinRjDfSGULKw0LE9K-": {
    "title": "Razor Components",
    "description": "Razor Components is a feature of [ASP.NET](http://ASP.NET) Core that allows developers to build reusable, self-contained components that can be used across multiple pages or even multiple applications. Razor Components is built on top of the Razor view engine, which allows developers to define components using a combination of Razor markup and C# code.\n\nRazor Components are useful for building complex, dynamic, and reusable UI elements, such as forms, tables, or dialogs, and can be used to build both small and large-scale web applications.\n\nFor more information, vist the following links:",
    "links": [
      {
        "title": "ASP.NET Core Razor components",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "Core Razor Componets in .NET",
        "url": "https://www.c-sharpcorner.com/blogs/asp-net-core-razor-componets",
        "type": "article"
      },
      {
        "title": "What is Core razor components?",
        "url": "https://www.youtube.com/watch?v=KseDLejhYi0",
        "type": "video"
      }
    ]
  },
  "dG--AAcZZdltYCeg6zCz2": {
    "title": "Middlewares",
    "description": "Middleware is software that sits between an operating system and application software, and facilitates communication and data exchange between them. In the context of web development, middleware refers to software components that handle requests and responses in a web application. These components are typically executed in a pipeline, with each component performing a specific task, such as authentication, logging, or routing.\n\nIn the [ASP.NET](http://ASP.NET) Core framework, middleware is a key concept that is used to build web applications. Middleware components are added to the application pipeline using the `IApplicationBuilder` interface, and are executed in the order in which they are added. For example, an application might have middleware components for handling authentication, logging, and routing, in that order.\n\nVisit the following links for more resources:",
    "links": [
      {
        "title": "What is Middleware?",
        "url": "https://www.redhat.com/en/topics/middleware/what-is-middleware",
        "type": "article"
      },
      {
        "title": "Introduction to Middleware",
        "url": "https://www.techtarget.com/searchapparchitecture/definition/middleware",
        "type": "article"
      },
      {
        "title": "What is Middleware in .NET?",
        "url": "https://www.talend.com/resources/what-is-middleware/",
        "type": "article"
      }
    ]
  },
  "U3HXmNq6x2YA3BwZsOTbe": {
    "title": "Filters and Attributes",
    "description": "In the [ASP.NET](http://ASP.NET) Core framework, filters and attributes are used to add additional functionality to controllers and action methods, such as authentication, authorization, caching, and exception handling.",
    "links": []
  },
  "EJxliq-HPVp00CVsFc6kf": {
    "title": "App Settings and Configs",
    "description": "In the [ASP.NET](http://ASP.NET) Core framework, app settings and configurations refer to the process of storing and managing application-specific settings and configuration data.\n\n*   **App Settings** refers to the key-value pairs of data that an application uses to configure its behavior, such as database connection strings, api keys, or other settings. These settings are typically stored in configuration files, such as `appsettings.json`, `appsettings.development.json`, or `appsettings.production.json`, and can be accessed using the IConfiguration interface.\n    \n*   **Configurations** refer to the process of loading and managing the app settings, including specifying the source of the settings and the format of the configuration files. In [ASP.NET](http://ASP.NET) Core, the `Startup` class is responsible for configuring the application's settings, and typically loads configuration data from various sources, such as JSON files, environment variables, or command-line arguments.\n    \n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "What is Azure App Configuration?",
        "url": "https://learn.microsoft.com/en-us/azure/azure-app-configuration/overview",
        "type": "article"
      },
      {
        "title": "What are App Configurations and how do I work with them?",
        "url": "https://support.procore.com/faq/what-are-app-configurations",
        "type": "article"
      },
      {
        "title": "Configuration & AppSettings",
        "url": "https://docs.servicestack.net/appsettings",
        "type": "article"
      }
    ]
  },
  "R7Qk5hsEIl9dspQXdaJAJ": {
    "title": "StyleCop Rules",
    "description": "StyleCop is a tool used for developers to standardize their code and ensure they all follow the same syntax principles. With StyleCop, one standard can be defined in a `stylecop.json` file and shared across your team so that each member has the same guidelines when formatting your code. Beyond a single project, StyleCop can also be added as an extension, so all of the projects on your IDE follow the same formatting rules, this is especially useful if your organization follows the same rule standards for all projects.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "StyleCop GitHub official page",
        "url": "https://github.com/StyleCop/StyleCop",
        "type": "opensource"
      },
      {
        "title": "StyeleCop Analyzers, a more modern version of StyleCop",
        "url": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers",
        "type": "opensource"
      },
      {
        "title": "StyleCop: A Detailed Guide to Starting and Using It",
        "url": "https://blog.submain.com/stylecop-detailed-guide/",
        "type": "article"
      },
      {
        "title": "The StyleCop setup and Advantages",
        "url": "https://www.youtube.com/watch?v=dmpOKmz3lPw",
        "type": "video"
      }
    ]
  },
  "ipABerBcM9zCte9pYaIse": {
    "title": "Minimal APIs",
    "description": "Minimal APIs is a lightweight approach to building HTTP APIs in .NET with minimal ceremony. It is designed for simplicity and performance, making it ideal for microservices, serverless applications, and small web services. Minimal APIs provide a streamlined way to define routes, handle requests, and return responses without requiring controllers or extensive configuration. They leverage top-level statements, reducing boilerplate code while maintaining flexibility and scalability.\n\nMinimal APIs support dependency injection, middleware, model binding, and validation. They also integrate seamlessly with OpenAPI (Swagger) for API documentation. Their simplicity makes them an excellent choice for building fast and efficient web applications with .NET.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "Minimal APIs in .NET 8: A Simplified Approach to Build Services",
        "url": "https://medium.com/codenx/minimal-apis-in-net-8-a-simplified-approach-to-build-services-eb50df56819f",
        "type": "article"
      },
      {
        "title": "Introduction to ASP.NET Core Minimal APIs",
        "url": "https://blog.jetbrains.com/dotnet/2023/04/25/introduction-to-asp-net-core-minimal-apis/",
        "type": "article"
      }
    ]
  },
  "POQPoN98eqOH2873ZI6Hm": {
    "title": "Object Relational Mapping",
    "description": "ORM stands for Object-Relational Mapping, and it is a technique that allows a developer to work with a database using objects. It is a way of abstracting the database so that the developer can think in terms of objects, rather than tables and SQL queries. This can make it easier to write and maintain code, as well as improve the performance of the application.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "ORM (Object Relational Mapping)",
        "url": "https://www.telerik.com/blogs/dotnet-basics-orm-object-relational-mapping",
        "type": "article"
      },
      {
        "title": "Understanding Object-Relational Mapping: Pros, Cons",
        "url": "https://www.altexsoft.com/blog/object-relational-mapping/",
        "type": "article"
      }
    ]
  },
  "ET74_7ieahNaGdPT11_NI": {
    "title": "Entity Framework Core",
    "description": "Entity Framework Core (EF Core) is an open-source Object-Relational Mapping (ORM) framework for .NET. It is a lightweight, cross-platform version of Entity Framework, the ORM framework that was part of the .NET Framework. EF Core allows developers to work with relational data using domain-specific objects, eliminating the need to write raw SQL statements. Instead, EF Core provides a set of APIs that can be used to interact with a database, providing a simple and efficient way to perform common database operations such as querying, inserting, updating, and deleting data.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Example of Entity Framework Core",
        "url": "https://learn.microsoft.com/en-us/ef/core/",
        "type": "article"
      },
      {
        "title": "Entity Framework Core Documentation",
        "url": "https://learn.microsoft.com/en-us/ef/",
        "type": "article"
      },
      {
        "title": "What are the Basics of Entity Framework Core?",
        "url": "https://www.jetbrains.com/dotnet/guide/tutorials/basics/entity-framework-core/",
        "type": "article"
      },
      {
        "title": "Explore top posts about .NET",
        "url": "https://app.daily.dev/tags/.net?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "eGVaAz3VhGu3cXBNxTAWd": {
    "title": "Framework Basics",
    "description": "An ORM (Object-Relational Mapping) framework is a tool that maps the objects in an application to the database tables, allowing developers to work with the database using familiar, object-oriented concepts.\n\nORM frameworks are tools that map the objects in an application to the database tables, allowing developers to work with the database using familiar, object-oriented concepts such as Entities, Mapping, Context, Queries, Lazy Loading, Change Tracking, and Caching.\n\nFor more resources, visit the following link:",
    "links": [
      {
        "title": "ORM Framework",
        "url": "https://www.h2kinfosys.com/blog/orm-framework/",
        "type": "article"
      },
      {
        "title": "What are Frameworks in ORM",
        "url": "https://www.killerphp.com/articles/what-are-orm-frameworks/",
        "type": "article"
      },
      {
        "title": "Essentials of ORM Framework",
        "url": "https://medium.com/@mikependon/the-essentials-of-orm-framework-in-your-software-development-837131efd91b",
        "type": "article"
      },
      {
        "title": "ORM Frameworks – What is an Object-Relational Mapping Framework",
        "url": "https://onlinecode.org/what-are-orm-frameworks/",
        "type": "article"
      }
    ]
  },
  "ZPeebwJ3OBuywEgLLgQTG": {
    "title": "Code First + Migrations",
    "description": "Code First Migrations is a feature of Entity Framework that enables you to change the model classes in your application and then propagate those changes to the database. When you use Code First Migrations, Entity Framework generates the necessary SQL commands to update the database schema to match the model classes.\n\nTo use Code First Migrations, you need to enable it in your Entity Framework application. This can be done by adding a reference to the Entity Framework Migrations NuGet package, and then enabling Migrations in your application.\n\nOnce Migrations is enabled, you can use the Package Manager Console to add a new migration to your application. This will generate a class that contains the necessary SQL commands to update the database schema. You can then use the Update-Database command to apply the migration to the database.",
    "links": [
      {
        "title": "What is a Code First Migration?",
        "url": "https://www.entityframeworktutorial.net/code-first/what-is-code-first.aspx",
        "type": "article"
      },
      {
        "title": "Example for Code First Migrations",
        "url": "https://learn.microsoft.com/en-us/ef/ef6/modeling/code-first/migrations/",
        "type": "article"
      },
      {
        "title": "Code First Migrations in Entity Framework",
        "url": "https://www.c-sharpcorner.com/UploadFile/26b237/code-first-migrations-in-entity-framework/",
        "type": "article"
      }
    ]
  },
  "9AMotSwdEbB8uOg80SykE": {
    "title": "Lazy, Eager, Explicit Loading",
    "description": "Eager Loading\n-------------\n\nEager Loading helps you to load all your needed entities at once; i.e., all your child entities will be loaded at single database call. This can be achieved, using the Include method, which returns the related entities as a part of the query and a large amount of data is loaded at once.\n\nLazy Loading\n------------\n\nIt is the default behavior of an Entity Framework, where a child entity is loaded only when it is accessed for the first time. It simply delays the loading of the related data, until you ask for it.\n\nVisit the following links for more resources:",
    "links": [
      {
        "title": "Eager Loading & Lazy Loading",
        "url": "https://www.c-sharpcorner.com/article/eager-loading-lazy-loading-and-explicit-loading-in-entity-framework/",
        "type": "article"
      },
      {
        "title": "Difference between Eager and Lazy Loading",
        "url": "https://stackoverflow.com/questions/31366236/lazy-loading-vs-eager-loading",
        "type": "article"
      },
      {
        "title": "Working With Lazy & Eager Loading in Entity Framework",
        "url": "https://dzone.com/articles/working-with-lazy-loading-and-eager-loading-in-ent",
        "type": "article"
      }
    ]
  },
  "wfEOvAkGXkTZGdGX341D4": {
    "title": "Change Tracker API",
    "description": "The Change Tracker API is a feature of ORM (Object-Relational Mapping) frameworks, such as Entity Framework Core, that allows developers to track changes to entities and automatically persist them to the database.\n\nThe Change Tracker API is typically exposed through the context class, which is the main class that manages the connection to the database and provides access to the entities.\n\nWhen an entity is retrieved from the database, the Change Tracker API marks it as \"unchanged\". When a property of the entity is modified, the Change Tracker API marks the entity as \"modified\". And when a new entity is added to the context, the Change Tracker API marks it as \"added\". For more resources, visit the following links:",
    "links": [
      {
        "title": "Change Tracking in EF Core",
        "url": "https://learn.microsoft.com/en-us/ef/core/change-tracking/",
        "type": "article"
      },
      {
        "title": "Intro to Change Tracking",
        "url": "https://www.oreilly.com/library/view/programming-entity-framework/9781449331825/ch05.html",
        "type": "article"
      },
      {
        "title": "ChangeTracker in Entity Framework Core",
        "url": "https://www.entityframeworktutorial.net/efcore/changetracker-in-ef-core.aspx",
        "type": "article"
      }
    ]
  },
  "UkWc41r0bZ1lptjse3As6": {
    "title": "Dapper",
    "description": "Dapper is a lightweight object-relational mapper (ORM) for the .NET framework. It is designed to provide fast and simple access to data stored in a database, by mapping the data to objects in the application.\n\nDapper helps you to write efficient and concise code for interacting with databases, without the need for a full-featured ORM like Entity Framework. It provides a set of extension methods for the IDbConnection interface, which you can use to execute SQL queries and map the results to strongly-typed objects.\n\nTo learn more about Dapper, you can visit the following links:",
    "links": [
      {
        "title": "The official Dapper website",
        "url": "https://github.com/StackExchange/Dapper",
        "type": "opensource"
      },
      {
        "title": "The Dapper Documentation",
        "url": "https://dapper-tutorial.net",
        "type": "article"
      }
    ]
  },
  "tYDVcnG0oUF3R8DwASvAh": {
    "title": "RepoDB",
    "description": "RepoDB is an open-source ORM (Object-Relational Mapping) library for .NET that simplifies the process of working with databases. It is a lightweight, fast, and easy-to-use library that provides a simple and consistent API for performing common database operations such as querying, inserting, updating, and deleting data.\n\nRepoDb is built on top of [ADO.NET](http://ADO.NET), which is the native data access technology in .NET, and provides a higher-level abstraction on top of it. This allows RepoDb to take advantage of the performance and scalability of [ADO.NET](http://ADO.NET) while providing a simpler and more convenient API for developers.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Get Started with RepoDB",
        "url": "https://repodb.net/",
        "type": "article"
      },
      {
        "title": "Complete Guide to RepoDB",
        "url": "https://medium.com/nerd-for-tech/everything-you-need-to-know-about-repodb-23cd4b9939c1",
        "type": "article"
      },
      {
        "title": "Why Choose RepoDB?",
        "url": "https://blog.devgenius.io/why-choose-repodb-orm-over-dapper-da87432c7830",
        "type": "article"
      }
    ]
  },
  "z24IJndpQYTl1PhiUI2mx": {
    "title": "NHibernate",
    "description": "NHibernate is an open-source Object-Relational Mapping (ORM) framework for .NET. It is a powerful and flexible framework that can greatly simplify working with relational data in .NET. NHibernate is similar to other ORM frameworks such as Entity Framework and RepoDb in that it provides a higher-level abstraction on top of the underlying data access technology ([ADO.NET](http://ADO.NET) in this case) and allows developers to work with data using domain-specific objects, eliminating the need to write raw SQL statements.\n\nNHibernate uses the concept of \"mapping files\" which are XML files that define how the classes in the application map to the tables and columns in the database. These mapping files are used to create a conceptual model of the data in the form of classes, and then NHibernate uses this model to generate the SQL statements necessary to interact with the database.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "What is Nhibernate?",
        "url": "https://www.partech.nl/en/publications/2021/08/what-is-nhibernate-and-how-is-it-different-from-entity-framework",
        "type": "article"
      },
      {
        "title": "NHibernate - ORM",
        "url": "https://www.tutorialspoint.com/nhibernate/nhibernate_orm.htm",
        "type": "article"
      },
      {
        "title": "Get Started with NHibernate",
        "url": "https://nhibernate.info/",
        "type": "article"
      }
    ]
  },
  "IejHMMVKwA0sIInla4FjX": {
    "title": "Dependency Injection",
    "description": "Dependency injection (DI) is a software design pattern that is used to manage the dependencies of an application. It is a technique that allows developers to write loosely-coupled code, by separating the responsibility of creating and managing objects from the objects themselves.\n\nIn a typical implementation, a DI container is used to manage the dependencies of the application. The container is responsible for creating and managing instances of objects and their dependencies, and providing them to other objects as needed.\n\nThere are different types of dependency injection, such as Constructor injection, Property injection, and Method injection, which can be used depending on the requirement and the design of the application. Visit the following links for more resources:",
    "links": [
      {
        "title": "What is Dependency Injection?",
        "url": "https://stackoverflow.com/questions/130794/what-is-dependency-injection",
        "type": "article"
      },
      {
        "title": "Dependency Injection, It's Definition & principles",
        "url": "https://www.growin.com/blog/what-is-dependency-injection/",
        "type": "article"
      },
      {
        "title": "Explore top posts about Dependency Injection",
        "url": "https://app.daily.dev/tags/dependency-injection?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "f212ztDU_kb7gO71Nn76L": {
    "title": "Scrutor",
    "description": "Scrutor is an open-source library for .NET that extends the functionality of the built-in dependency injection framework in .NET Core. It provides a set of extension methods for the `IServiceCollection` interface, which can be used to register and configure services in a more convenient and flexible way.\n\nOne of the main features of Scrutor is its ability to automatically scan assemblies for services and register them with the dependency injection container, allowing you to avoid having to manually register each service one by one. It also provides a fluent API that makes it easy to configure services, such as specifying the lifetime of a service, adding decorators, and more.\n\nFor more information, visit the following resources:",
    "links": [
      {
        "title": "How to use Scrutor in ASP.Net Core?",
        "url": "https://www.infoworld.com/article/3321356/how-to-use-scrutor-in-aspnet-core.html",
        "type": "article"
      },
      {
        "title": "Complete Guide to Scrutor",
        "url": "https://andrewlock.net/using-scrutor-to-automatically-register-your-services-with-the-asp-net-core-di-container/",
        "type": "article"
      }
    ]
  },
  "Tjaczp2E-cCn0qSv89xgo": {
    "title": "Life Cycles",
    "description": "In [ASP.NET](http://ASP.NET), dependency injection (DI) lifecycles determine the lifetime of objects that are resolved through the DI container. There are several predefined lifecycle options in the `Microsoft.Extensions.DependencyInjection` library, including:\n\n*   **Transient:** A new instance of the object is created every time it is requested.\n*   **Scoped:** A new instance of the object is created for each request within the same scope.\n*   **Singleton:** A single instance of the object is created and shared across the entire application.\n\nAdditionally, you can also create a custom lifecycle by implementing the `Microsoft.Extensions.DependencyInjection.IServiceScopeFactory` interface\n\nFor more resources, visit the following links:",
    "links": [
      {
        "title": "What are Service Life Cyles in ASP.NET Core?",
        "url": "https://endjin.com/blog/2022/09/service-lifetimes-in-aspnet-core",
        "type": "article"
      },
      {
        "title": "Learn Service Lifetimes in .NET Core",
        "url": "https://henriquesd.medium.com/dependency-injection-and-service-lifetimes-in-net-core-ab9189349420",
        "type": "article"
      },
      {
        "title": "Complete Guide to Dependency Injection Lifecycles",
        "url": "https://www.youtube.com/watch?v=wA5bPsv2CLA",
        "type": "video"
      }
    ]
  },
  "iM760f8Ys66-VSkMiZfIX": {
    "title": "DI Containers",
    "description": "A dependency injection (DI) container is a software component that is responsible for managing the dependencies of an application. It is used to create and manage instances of objects and their dependencies, and is particularly useful for implementing the Dependency Inversion Principle in software development.\n\nA DI container typically consists of two main parts: a configuration API, which is used to register the types and their dependencies, and a resolution API, which is used to retrieve instances of the registered types. The DI container automatically resolves the dependencies of the objects it creates, and manages the lifetime of the objects and their dependencies.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "What is DI Container?",
        "url": "https://www.dotnettricks.com/learn/dependencyinjection/what-is-ioc-container-or-di-container",
        "type": "article"
      },
      {
        "title": "Getting Started with DI Container",
        "url": "https://stackoverflow.com/questions/50718586/what-is-a-di-container",
        "type": "article"
      },
      {
        "title": "How to Use DI Container?",
        "url": "https://learn.userfrosting.com/services/the-di-container",
        "type": "article"
      },
      {
        "title": "Explore top posts about Containers",
        "url": "https://app.daily.dev/tags/containers?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "J9XdYLo7qJiBoL8p3c68P": {
    "title": "Microsoft.Extensions",
    "description": "Microsoft.Extensions.DependencyInjection is a dependency injection framework that is part of the Microsoft.Extensions.DependencyInjection NuGet package. It is used to create and manage instances of objects and their dependencies, and is particularly useful for implementing the Dependency Inversion Principle in .NET applications.\n\nThe package provides a simple and consistent API for registering services and resolving dependencies, which can be used to configure and manage the lifetime of objects in an application. It also provides built-in support for various types of service lifetime, such as transient, singleton and scoped.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Guide to Microsoft Extensions Dependency Injection",
        "url": "https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection?view=dotnet-plat-ext-7.0",
        "type": "article"
      },
      {
        "title": "Exploring the Microsoft.Extensions.DependencyInjection",
        "url": "https://www.codeproject.com/Articles/5339241/Exploring-the-Microsoft-Extensions-DependencyInjec",
        "type": "article"
      },
      {
        "title": "How to use Microsoft.Extensions.DependencyInjection",
        "url": "https://stackoverflow.com/questions/53825155/how-can-i-use-microsoft-extensions-dependencyinjection-in-an-net-core-console-a",
        "type": "article"
      },
      {
        "title": "Explore top posts about Microsoft",
        "url": "https://app.daily.dev/tags/microsoft?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "gbpSbjF12dBE1Tb3PX8Bz": {
    "title": "AutoFac",
    "description": "Autofac is an open-source dependency injection framework for .NET. It is designed to make it easier to manage the dependencies of an application by automatically resolving and managing the lifetime of objects and their dependencies.\n\nAutofac uses a technique called \"component registration\" to define the objects and dependencies of an application. This is done by creating instances of the `ContainerBuilder` class and using its methods to register types, instances and factories. Then, the `Build()` method is called to create an instance of the `IContainer` interface, which can be used to resolve dependencies throughout the application.\n\nVisit the following resources for more information:",
    "links": [
      {
        "title": "Autofac’s Documentation",
        "url": "https://autofac.readthedocs.io/en/latest/",
        "type": "article"
      },
      {
        "title": "Getting started with Autofac",
        "url": "https://autofac.org/",
        "type": "article"
      },
      {
        "title": "Dependency Injection with Autofac",
        "url": "https://www.codeproject.com/Articles/25380/Dependency-Injection-with-Autofac",
        "type": "article"
      }
    ]
  },
  "M3BW_63MFQyD8NE68dazD": {
    "title": "Scoped",
    "description": "Scoped lifetime is a type of dependency injection that creates a new instance of an object for each unique request, but reuses the same instance for the same request. This means that if multiple components within the same request depend on the same service, they will all receive the same instance. However, if another request is made, a new instance of the service will be created for that request.\n\nScoped lifetime is useful when you have services that are specific to a given request, such as a request-scoped database context. This allows you to have a separate and isolated instance of a service for each unique request, which can help to prevent cross-request contamination of data and improve performance.\n\nFor more information, visit the following resources:",
    "links": [
      {
        "title": "Dependency Injection - What is Scope?",
        "url": "https://javaranch.com/journal/2008/10/dependency-injection-what-is-scope.html",
        "type": "article"
      },
      {
        "title": "Effective Dependency Injection Scoping",
        "url": "https://medium.com/android-news/effective-dependency-injection-scoping-4bac813d4491",
        "type": "article"
      }
    ]
  },
  "-N0XM0-VtCZ6QMo2YyMD-": {
    "title": "Transient",
    "description": "Transient lifetime is a type of dependency injection that creates a new instance of an object each time it is requested. This means that if multiple components within the same request or across different requests depend on the same service, they will each receive a new instance of the service.\n\nTransient lifetime is useful when you have services that are stateless and do not need to maintain any data between requests, such as a service that performs a simple calculation or returns data from a database.\n\nFor more information:",
    "links": [
      {
        "title": "What are Transient Dependencies?",
        "url": "https://blazor-university.com/dependency-injection/dependency-lifetimes-and-scopes/transient-dependencies/",
        "type": "article"
      },
      {
        "title": "Dependency Injection Lifetime",
        "url": "https://www.tektutorialshub.com/asp-net-core/asp-net-core-dependency-injection-lifetime/",
        "type": "article"
      },
      {
        "title": "Dependency Injection Explained with Transient",
        "url": "https://www.youtube.com/watch?v=NkTF_6IQPiY",
        "type": "video"
      }
    ]
  },
  "y9bDrCjkDbxSIrEEtu_Mi": {
    "title": "Singleton",
    "description": "Singleton lifetime is a type of dependency injection that creates a single instance of an object and reuses it throughout the lifetime of the application. This means that if multiple components within the same request or across different requests depend on the same service, they will all receive the same instance of the service.\n\nSingleton lifetime is useful when you have services that need to maintain state or shared data across requests, such as a service that caches data or maintains a connection to a resource.\n\nFor more information:",
    "links": [
      {
        "title": "What are Singleton Dependencies?",
        "url": "https://blazor-university.com/dependency-injection/dependency-lifetimes-and-scopes/transient-dependencies/",
        "type": "article"
      },
      {
        "title": "Dependency Injection Lifetime",
        "url": "https://www.tektutorialshub.com/asp-net-core/asp-net-core-dependency-injection-lifetime/",
        "type": "article"
      },
      {
        "title": "Dependency Injection Explained with Singleton",
        "url": "https://www.youtube.com/watch?v=NkTF_6IQPiY",
        "type": "video"
      }
    ]
  },
  "7Nth4LOrM_KirhvjDGkgS": {
    "title": "Caching",
    "description": "Caching is a technique of storing frequently used data or information in a local memory, for a certain time period. So, next time, when the client requests the same information, instead of retrieving the information from the database, it will give the information from the local memory. The main advantage of caching is that it improves the performance by reducing the processing burden.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Caching in ASP.Net",
        "url": "https://www.c-sharpcorner.com/UploadFile/2072a9/caching-in-Asp-Net/",
        "type": "article"
      },
      {
        "title": "Overview of caching in ASP.NET Core",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/performance/caching/overview?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "Intro to Data Caching in ASP.NET",
        "url": "https://www.tutorialspoint.com/asp.net/asp.net_data_caching.htm",
        "type": "article"
      }
    ]
  },
  "8CRsr7UZszjc_fZ-4ZmIx": {
    "title": "Memory Cache",
    "description": "Memory caching (often simply referred to as caching) is a technique in which computer applications temporarily store data in a computer’s main memory (i.e., random access memory, or RAM) to enable fast retrievals of that data. The RAM that is used for the temporary storage is known as the cache.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Cache in-memory in ASP.NET Core",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/performance/caching/memory?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "What is Memory Caching?",
        "url": "https://hazelcast.com/glossary/memory-caching/",
        "type": "article"
      },
      {
        "title": "Intro to In-Memory Caching in C#",
        "url": "https://www.youtube.com/watch?v=2jj2wH60QuE",
        "type": "video"
      }
    ]
  },
  "FV4GsPjUyAc99DnIwkkCC": {
    "title": "Entity Framework 2nd Level Cache",
    "description": "Entity Framework Core(EF Core) is a cross-platform version of the popular Entity Framework data access technology that is lightweight, extendable, and open source. It can be used as an object-relational mapper (O/RM), which can Allow .NET developers to use .NET objects to interact with a database and Removes the requirement for most of the data-access code that is generally required.\n\nHowever, during peak loads, high-transaction .NET Core apps using EF Core have performance and scalability problems in the database tier. This is because, although you can scale the application layer by adding more application servers, you can't scale the database tier by adding more database servers.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Entity Framework 2nd Level Cache",
        "url": "https://www.gridgain.com/docs/latest/developers-guide/net-specific/net-entity-framework-cache",
        "type": "article"
      },
      {
        "title": "Caching In Entity Framework",
        "url": "https://www.c-sharpcorner.com/article/caching-in-entity-framework-ef-core-using-ncache/",
        "type": "article"
      },
      {
        "title": "What is Entity Framework?",
        "url": "https://www.youtube.com/watch?v=Z7713GBhi4k",
        "type": "video"
      }
    ]
  },
  "SiG0FWWznjDg-2mIWlchy": {
    "title": "Distributed Cache",
    "description": "A distributed cache is a cache shared by multiple app servers, typically maintained as an external service to the app servers that access it. A distributed cache can improve the performance and scalability of an [ASP.NET](http://ASP.NET) Core app, especially when the app is hosted by a cloud service or a server farm.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Distributed caching in ASP.NET Core",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/performance/caching/distributed?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "What is a Distributed Cached?",
        "url": "https://hazelcast.com/glossary/distributed-cache/",
        "type": "article"
      },
      {
        "title": "Distributed Caching In ASP.NET Core With Redis",
        "url": "https://www.youtube.com/watch?v=Tt5zIKVMMbs",
        "type": "video"
      }
    ]
  },
  "u2pc3ZkL0EumAsbM12D5y": {
    "title": "Memcached",
    "description": "Memcached is an open-source, high-performance, distributed memory object caching system which helps in reducing database load. It maintains data as an in-memory key-value store for small chunks of arbitrary data (strings, objects) which can be result of API calls, database reads and so on.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Using Memcached as Distributed Cache in .NET Core",
        "url": "https://dotnetcorecentral.com/blog/using-memcached-as-distributed-cache-in-net-core/",
        "type": "article"
      },
      {
        "title": "Intro to Memcached",
        "url": "https://memcached.org/",
        "type": "article"
      },
      {
        "title": "Memcached as Distributed Cache in .Net Core Application",
        "url": "https://www.youtube.com/watch?v=yQ8Kwx9M_Hg",
        "type": "video"
      }
    ]
  },
  "Ts0gJ4DdwFp48LGr4YSvM": {
    "title": "Redis",
    "description": "Redis is an open source (BSD licensed) which is an in-memory data structure store used as a database, cache, message broker, and streaming engine. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and various levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.\n\nYou can use Redis in many programming languages. It is such a popular and widely used cache that Microsoft Azure also provides its cloud-based version with the name Azure Cache for Redis.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Learn how to build with Redis Stack and .NET",
        "url": "https://redis.io/docs/stack/get-started/tutorials/stack-dotnet/",
        "type": "article"
      },
      {
        "title": "Redis Cache In ASP.NET 6.0 Web API",
        "url": "https://www.c-sharpcorner.com/article/easily-use-redis-cache-in-asp-net-6-0-web-api/",
        "type": "article"
      },
      {
        "title": "Explore top posts about Redis",
        "url": "https://app.daily.dev/tags/redis?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "ASP.Net Core Distributed Caching - Redis Caching",
        "url": "https://www.youtube.com/watch?v=4Br-QnBo6Yw",
        "type": "video"
      }
    ]
  },
  "Ujzn_dILCA7xoupnz398l": {
    "title": "Databases",
    "description": "In an [ASP.NET](http://ASP.NET) application, there are several types of databases that can be used to store and retrieve data. Some of the most commonly used databases include:\n\n*   Relational databases\n*   NoSQL databases\n*   In-memory databases\n*   Embedded databases\n*   Cloud-based databases\n\nEach database type has its own set of features and use cases, and the choice of which database to use will depend on the specific requirements of the application.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "ASP.NET Database Tutorial",
        "url": "https://www.guru99.com/insert-update-delete-asp-net.html",
        "type": "article"
      },
      {
        "title": "Introduction to Working with a Database in ASP.NET",
        "url": "https://learn.microsoft.com/en-us/aspnet/web-pages/overview/data/5-working-with-data",
        "type": "article"
      },
      {
        "title": "ASP.NET Web Pages - Databases",
        "url": "https://www.w3schools.com/asp/webpages_database.asp",
        "type": "article"
      },
      {
        "title": "Explore top posts about Backend Development",
        "url": "https://app.daily.dev/tags/backend?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "6p5atMYw3b3bXkQuXZsDV": {
    "title": "Search Engines",
    "description": "A search engine in an [ASP.NET](http://ASP.NET) application is a tool or module that allows users to search for and retrieve specific information from the application's database or other data sources. Search engines can be used to perform full-text search, faceted search, and geospatial search, among other things.\n\nSearch engines can be integrated into an [ASP.NET](http://ASP.NET) application by using libraries or frameworks that provide a .NET client for interacting with the search engine. Some popular search engines that can be integrated with an [ASP.NET](http://ASP.NET) application include Elasticsearch, Apache Solr, Sphinx, and Microsoft Azure Search.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "Search Engine Optimization with ASP.NET",
        "url": "https://learn.microsoft.com/en-us/archive/msdn-magazine/2009/september/search-engine-optimization-with-asp-net-4-0-visual-studio-2010-and-iis7",
        "type": "article"
      },
      {
        "title": "Creating an ASP.NET Search Engine",
        "url": "https://www.developerfusion.com/article/4389/create-a-site-search-engine-in-aspnet/",
        "type": "article"
      },
      {
        "title": "Simple Search Engine in ASP.NET",
        "url": "https://www.youtube.com/watch?v=KTkubhS-u50",
        "type": "video"
      }
    ]
  },
  "mK9OAwjReZoQZr1WSLRKJ": {
    "title": "Elastic Search",
    "description": "Elasticsearch is a distributed, open-source search and analytics engine that can be used to index, search, and analyze large volumes of data quickly and in near real-time. It is built on top of the Apache Lucene library and can be used to perform full-text search, faceted search, and geospatial search, among other things.\n\nIn an [ASP.NET](http://ASP.NET) application, Elasticsearch can be integrated as a search engine to provide advanced search functionality to the application. There are several libraries available for integrating Elasticsearch with an [ASP.NET](http://ASP.NET) application, such as Nest and [Elasticsearch.Net](http://Elasticsearch.Net). These libraries provide a .NET client for Elasticsearch, which can be used to interact with the Elasticsearch engine from within an [ASP.NET](http://ASP.NET) application. To learn more, visit the following resources:",
    "links": [
      {
        "title": "Elasticsearch in ASP.NET Core",
        "url": "https://code-maze.com/elasticsearch-aspnet-core/",
        "type": "article"
      },
      {
        "title": "An Elasticsearch Tutorial for .NET Developers",
        "url": "https://www.toptal.com/dot-net/elasticsearch-dot-net-developers",
        "type": "article"
      },
      {
        "title": "How to integrate ElasticSearch in ASP.NET?",
        "url": "https://blexin.com/en/blog-en/how-to-integrate-elasticsearch-in-asp-net-core/",
        "type": "article"
      },
      {
        "title": "Explore top posts about ELK",
        "url": "https://app.daily.dev/tags/elk?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "2sY_p_8cOOBmZtDHO2Cmy": {
    "title": "Solr",
    "description": "Apache Solr is a search engine platform based on the Apache Lucene library. It is a standalone enterprise search server that provides a REST-like API for indexing, searching, and updating documents. Solr can be used to perform full-text search, faceted search, and geospatial search, among other things.\n\nSolr can be useful in [ASP.NET](http://ASP.NET) application to provide advanced search capabilities, such as full-text search, faceted search and geospatial search, which can be useful in e-commerce, content management systems, and logging and monitoring applications. It is known for its scalability, performance and its ability to handle large volumes of data with complex queries.\n\nFor more information, visit the following resources:",
    "links": [
      {
        "title": "Guide to Solr in ASP.NET",
        "url": "https://www.codeproject.com/Tips/480091/Using-Solr-for-Search-with-NET-Csharp",
        "type": "article"
      },
      {
        "title": "How to get Started with Solr.NET?",
        "url": "https://stackoverflow.com/questions/5646615/how-to-get-started-with-solr-net",
        "type": "article"
      },
      {
        "title": "Integrate Solr Instance With .NET Core",
        "url": "https://stacksecrets.com/dot-net-core/integrate-solr-instance-with-net-core",
        "type": "article"
      }
    ]
  },
  "Ye9WHfwZa-Fc2YDaTCmU1": {
    "title": "Sphinx",
    "description": "Sphinx is an open-source full-text search engine that can be used to index, search and analyze large volumes of data quickly and in near real-time. It is designed to handle high-traffic websites and large data sets and can be used for full-text search, faceted search, and geospatial search.\n\nIn an [ASP.NET](http://ASP.NET) application, Sphinx can be integrated as a search engine to provide advanced search functionality to the application. There are several libraries available for integrating Sphinx with an [ASP.NET](http://ASP.NET) application, such as [SphinxQL.NET](http://SphinxQL.NET) and SphinxClient. These libraries provide a .NET client for Sphinx, which can be used to interact with the Sphinx engine from within an [ASP.NET](http://ASP.NET) application.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Overview of Sphinx in ASP.NET",
        "url": "https://www.sphinxconnector.net/",
        "type": "article"
      },
      {
        "title": "Intro to Sphinx",
        "url": "http://sphinxsearch.com/forum/view.html?id=3609",
        "type": "article"
      },
      {
        "title": "Documentation of Sphinx in ASP.NET",
        "url": "https://www.ericholscher.com/blog/2016/jul/1/sphinx-and-rtd-for-writers/",
        "type": "article"
      }
    ]
  },
  "LrjmJs6_rXUkc2A7fEq24": {
    "title": "Cloud",
    "description": "Cloud in the context of [ASP.NET](http://ASP.NET) refers to the use of cloud computing services to host and run [ASP.NET](http://ASP.NET) web applications. Cloud computing is a model of delivering computing resources (such as servers, storage, and applications) over the internet on a pay-per-use basis.\n\nIn the case of [ASP.NET](http://ASP.NET), cloud providers such as Microsoft Azure, Amazon Web Services (AWS), and Google Cloud Platform (GCP) offer services specifically tailored to host and run [ASP.NET](http://ASP.NET) web applications. These services include virtual machines, web roles, and serverless computing, which can be used to deploy and run [ASP.NET](http://ASP.NET) web applications in the cloud.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Building a .NET Cloud Application",
        "url": "https://www.c-sharpcorner.com/article/building-the-net-cloud-application/",
        "type": "article"
      },
      {
        "title": "How to make a .NET Cloud Application?",
        "url": "https://dotnet.microsoft.com/en-us/apps/cloud",
        "type": "article"
      },
      {
        "title": "Getting started with Cloud",
        "url": "https://aws.amazon.com/free/",
        "type": "article"
      },
      {
        "title": "Explore top posts about Cloud",
        "url": "https://app.daily.dev/tags/cloud?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "KrkV1w9b_Nwm6pe9diDRS": {
    "title": "Cosmos DB",
    "description": "For more information, visit the following resources:",
    "links": [
      {
        "title": "What is Azure Cosmos DB?",
        "url": "https://intellipaat.com/blog/what-is-azure-cosmos-db/",
        "type": "article"
      },
      {
        "title": "Cosmos DB, Its Features, Benefits, Pricing etc",
        "url": "https://stackify.com/what-is-azure-cosmos-db/",
        "type": "article"
      },
      {
        "title": "Getting started with Cosmos DB",
        "url": "https://acloudguru.com/blog/engineering/azure-cosmos-db-lets-you-focus-on-the-good-stuff",
        "type": "article"
      }
    ]
  },
  "1Om9aQDZmnj_DN10ogwDL": {
    "title": "Dynamo DB",
    "description": "Amazon DynamoDB is a fully-managed, NoSQL database service provided by Amazon Web Services (AWS) that can be used to store and retrieve large amounts of data. It is a highly-scalable, fast, and flexible NoSQL database service that supports both document and key-value data models.\n\nDynamoDB is designed to handle extremely high levels of read and write throughput, and it automatically scales to accommodate the traffic of an application. It also provides built-in support for data replication, allowing data to be automatically spread across multiple availability zones for increased durability and availability.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Getting started with DynamoDB",
        "url": "https://aws.amazon.com/dynamodb/",
        "type": "article"
      },
      {
        "title": "Introduction to DynamoDB",
        "url": "https://cloudacademy.com/lab/introduction-dynamodb/",
        "type": "article"
      },
      {
        "title": "Explore top posts about AWS DynamoDB",
        "url": "https://app.daily.dev/tags/aws-dynamodb?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "FnRxRY3uDZdTve1w-nBfc": {
    "title": "Relational",
    "description": "A relational database is a type of database that stores data in a structured format, using tables and relationships between them. It is based on the relational model, which organizes data into one or more tables, with each table consisting of a set of rows and columns.\n\nThe main feature of a relational database is the ability to establish relationships between tables, using a feature called a foreign key. A foreign key is a column or set of columns in one table that is used to link to the primary key of another table. This allows data to be spread across multiple tables, but still be connected and easily accessed through these relationships.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Introduction to Working with Database in ASP.NET",
        "url": "https://learn.microsoft.com/en-us/aspnet/web-pages/overview/data/5-working-with-data",
        "type": "article"
      },
      {
        "title": "Implement a Relational Database with ASP.NET",
        "url": "https://openclassrooms.com/en/courses/5671811-implement-a-relational-database-with-asp-net-core",
        "type": "article"
      }
    ]
  },
  "HQHSzsqBGSVYNLQ9o5EI-": {
    "title": "SQL Server",
    "description": "MS SQL (or Microsoft SQL Server) is the Microsoft developed relational database management system (RDBMS). MS SQL uses the T-SQL (Transact-SQL) query language to interact with the relational databases. There are many different versions and editions available of MS SQL\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "MS SQL website",
        "url": "https://www.microsoft.com/en-ca/sql-server/",
        "type": "article"
      },
      {
        "title": "Tutorials for SQL Server",
        "url": "https://docs.microsoft.com/en-us/sql/sql-server/tutorials-for-sql-server-2016?view=sql-server-ver15",
        "type": "article"
      },
      {
        "title": "Getting started with SQL",
        "url": "https://www.w3schools.com/sql/default.asp",
        "type": "article"
      },
      {
        "title": "Explore top posts about SQL",
        "url": "https://app.daily.dev/tags/sql?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "SQL Server tutorial for beginners",
        "url": "https://www.youtube.com/watch?v=-EPMOaV7h_Q",
        "type": "video"
      }
    ]
  },
  "An9TLvo-I6NtC8wFU3bh4": {
    "title": "PostgreSQL",
    "description": "PostgreSQL, often simply \"Postgres\", is an open-source relational database management system (RDBMS) emphasizing extensibility and SQL compliance. It was originally developed at the University of California, Berkeley in the 1980s and is now maintained by the PostgreSQL Global Development Group.\n\nPostgres is known for its robustness and reliability, as well as its support for advanced features such as concurrency control, full-text search, and geospatial data. It is also highly extensible, allowing developers to create custom functions and operators in a variety of programming languages, including C, Python, and JavaScript.\n\nFor more information, visit the following resources:",
    "links": [
      {
        "title": "Postgresql - Open Source Relational Database",
        "url": "https://www.postgresql.org/",
        "type": "article"
      },
      {
        "title": "What is Postgresql?",
        "url": "https://postgresqltutorial.com/postgresql-getting-started/what-is-postgresql/",
        "type": "article"
      },
      {
        "title": "Introduction, Advantages & Disadvantages of PostgreSQL",
        "url": "https://www.guru99.com/introduction-postgresql.html",
        "type": "article"
      },
      {
        "title": "Explore top posts about PostgreSQL",
        "url": "https://app.daily.dev/tags/postgresql?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "Gs8XcsTo11MeCsiSGpjkU": {
    "title": "MariaDB",
    "description": "MariaDB is an open-source relational database management system (RDBMS) that is a fork of the MySQL database. It is fully compatible with MySQL, but it also includes additional features and improvements. MariaDB is developed and maintained by the MariaDB Corporation and the MariaDB community, and it is widely used as a replacement for MySQL in many web and enterprise applications.\n\nIn an [ASP.NET](http://ASP.NET) application, MariaDB can be used as the underlying database for storing and retrieving data. There are several libraries available for integrating MariaDB with an [ASP.NET](http://ASP.NET) application, such as MariaDB.Data, MySql.Data, and Dapper. These libraries provide a .NET client for MariaDB, which can be used to interact with the MariaDB database from within an [ASP.NET](http://ASP.NET) application.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "How to use MariaDB in ASP.NET?",
        "url": "https://blog.georgekosmidis.net/using-mariadb-in-an-aspnet-core-api-with-entity-framework-core.html",
        "type": "article"
      },
      {
        "title": "Working with MariaDB and .Net",
        "url": "https://mariadb.com/kb/en/mariadb-and-net/",
        "type": "article"
      },
      {
        "title": "Building an application with ASP.NET & MariaDB",
        "url": "https://medium.com/@BMatt92656920/building-a-web-application-with-asp-net-core-mvc-entity-framework-core-mariadb-bootstrap-a2bf0927d20e",
        "type": "article"
      },
      {
        "title": "Explore top posts about Infrastructure",
        "url": "https://app.daily.dev/tags/infrastructure?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "WsGwg4qdlu_vBsFEpmBvU": {
    "title": "MySQL",
    "description": "MySQL is an open-source relational database management system (RDBMS) that is widely used in web and enterprise applications. It is developed, distributed, and supported by Oracle Corporation. MySQL provides a rich set of features to handle high-performance, high-availability, and high-scalability requirements of modern web applications.\n\nIn an [ASP.NET](http://ASP.NET) application, MySQL can be used as the underlying database for storing and retrieving data. There are several libraries available for integrating MySQL with an [ASP.NET](http://ASP.NET) application, such as MySql.Data, Dapper and EF Core. These libraries provide a .NET client for MySQL, which can be used to interact with the MySQL database from within an [ASP.NET](http://ASP.NET) application.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Getting started with ASP.NET Core and MySQL",
        "url": "https://dev.mysql.com/blog-archive/getting-started-with-asp-net-core-and-mysql-connectornet/",
        "type": "article"
      },
      {
        "title": "MySql database connectivity with ASP.Net",
        "url": "https://www.c-sharpcorner.com/UploadFile/brij_mcn/mysql-database-connectivity-with-Asp-Net/",
        "type": "article"
      },
      {
        "title": "Explore top posts about MySQL",
        "url": "https://app.daily.dev/tags/mysql?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "How To Connect MySQL With ASP.NET",
        "url": "https://www.youtube.com/watch?v=g5rVd1JGbIg",
        "type": "video"
      }
    ]
  },
  "WUis4K9vduriYdVkKvM9r": {
    "title": "NoSQL",
    "description": "NoSQL (Not Only SQL) is a type of database that does not use the traditional table-based relational model. It is designed to handle large amounts of unstructured or semi-structured data, and it is often used in big data and real-time web applications. NoSQL databases are highly scalable and can handle high-performance needs and large data sets.\n\nThere are several types of NoSQL databases, such as document databases, key-value databases, graph databases, and column-family databases, each with their own unique features and use cases. Some examples of NoSQL databases include MongoDB, Cassandra, RavenDB, CouchDB, and Redis.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "NoSQL in .NET Applications",
        "url": "https://www.slideshare.net/shijucv/nosql-database-in-net-apps",
        "type": "article"
      },
      {
        "title": "Open Source NoSQL Database for .NET",
        "url": "https://www.alachisoft.com/nosdb/",
        "type": "article"
      },
      {
        "title": "Use NoSQL databases in ASP.NET",
        "url": "https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure",
        "type": "article"
      },
      {
        "title": "Explore top posts about NoSQL",
        "url": "https://app.daily.dev/tags/nosql?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "-wYRa8qSuKVKo_yOTKV67": {
    "title": "MongoDB",
    "description": "MongoDB is a cross-platform, open-source, NoSQL document-oriented database that can be used to store and retrieve large amounts of data. It uses a flexible, JSON-like data structure called BSON (binary JSON) and it is designed to handle large amounts of unstructured data.\n\nIn an [ASP.NET](http://ASP.NET) application, MongoDB can be used as a data store to persist and retrieve application data. There are several libraries available for integrating MongoDB with an [ASP.NET](http://ASP.NET) application, such as MongoDB.Driver and C# MongoDB Driver. These libraries provide a .NET client for MongoDB, which can be used to interact with the MongoDB server from within an [ASP.NET](http://ASP.NET) application.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "Use MongoDB in Your C# ASP.NET Apps",
        "url": "https://developer.okta.com/blog/2020/01/02/mongodb-csharp-aspnet-datastore",
        "type": "article"
      },
      {
        "title": "MongoDB With ASP.NET Core Web API",
        "url": "https://www.c-sharpcorner.com/article/using-mongodb-with-asp-net-core-web-api/",
        "type": "article"
      },
      {
        "title": "Explore top posts about MongoDB",
        "url": "https://app.daily.dev/tags/mongodb?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "U_-Gt5csu_hihl7ybFY-B": {
    "title": "Cassandra",
    "description": "Apache Cassandra is a free and open-source, NoSQL, distributed, wide-column store, and high-performance database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure. It is designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure.\n\nCassandra is a column-family store and it stores data in a structured format, using tables and columns. It is based on a data model that is similar to that of Google's Bigtable, and it provides a query language that is similar to SQL.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Introduction to Cassandra",
        "url": "https://www.tutorialspoint.com/cassandra/cassandra_introduction.htm",
        "type": "article"
      },
      {
        "title": "Overview of Cassandra in ASP.NET",
        "url": "https://www.spiceworks.com/tech/big-data/articles/what-is-cassandra/",
        "type": "article"
      },
      {
        "title": "Explore top posts about Apache Cassandra",
        "url": "https://app.daily.dev/tags/apache-cassandra?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "3gcXaOnHL4v5OoStrTWNV": {
    "title": "LiteDB",
    "description": "LiteDB is a lightweight, open-source, NoSQL embedded document-oriented database engine for .NET and .NET Core. It uses a file-based storage system, meaning that the entire database is stored in a single file on disk. It uses a similar syntax to MongoDB, but it is designed to be simple and easy to use, and it does not require a separate server or installation.\n\nLiteDB supports data types like string, int, decimal, DateTime, and also supports binary data and serialized objects. It also supports LINQ, transactions, indexes and collections.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Getting started with LiteDB",
        "url": "https://www.litedb.org/",
        "type": "article"
      },
      {
        "title": "Overview of LiteDB in ASP.NET",
        "url": "https://www.litedb.org/docs/",
        "type": "article"
      }
    ]
  },
  "vHcwt6ARi5YR3v-eDDjfl": {
    "title": "CouchDB",
    "description": "CouchDB is an open-source, NoSQL document database designed for the web. It uses a document-oriented data model, which means that it stores data in semi-structured JSON format, and it is designed to be simple and easy to use. CouchDB provides a built-in web interface, called Futon, which can be used to interact with the database, and it also provides an HTTP API that can be used to interact with the database from an [ASP.NET](http://ASP.NET) application.\n\nIn an [ASP.NET](http://ASP.NET) application, CouchDB can be used as a data store to persist and retrieve application data. There are several libraries available for integrating CouchDB with an [ASP.NET](http://ASP.NET) application, such as Couchbase, which provides a .NET client for CouchDB that can be used to interact with the CouchDB server from within an [ASP.NET](http://ASP.NET) application.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "CouchDB in ASP.NET Core Application",
        "url": "https://www.c-sharpcorner.com/article/crud-operation-to-couchdb-via-rest-api-in-asp-net-core-application/",
        "type": "article"
      },
      {
        "title": "Use CouchDB with .NET",
        "url": "https://stackoverflow.com/questions/1050152/use-couchdb-with-net",
        "type": "article"
      }
    ]
  },
  "fQ3w8REYWzQfeJ0nPyq6W": {
    "title": "Log Frameworks",
    "description": "In [ASP.NET](http://ASP.NET), log frameworks are libraries that provide a way to log and analyze data in an application. Some popular log frameworks for [ASP.NET](http://ASP.NET) include:\n\n*   Serilog\n*   NLog\n*   Log4Net\n*   ELMAH\n*   Microsoft.Extensions.Logging\n\nThese are some of the most popular log frameworks in [ASP.NET](http://ASP.NET), each of them has its own set of features and use cases, and the choice of which log framework to use will depend on the specific requirements of the application.\n\nVisit the following links to learn more:",
    "links": [
      {
        "title": "Implement logging in ASP.NET",
        "url": "https://learn.microsoft.com/en-us/training/modules/aspnet-logging/",
        "type": "article"
      },
      {
        "title": "ASP.NET Core: Logging with log4net",
        "url": "https://www.linkedin.com/learning/asp-dot-net-core-logging-with-log4net",
        "type": "article"
      },
      {
        "title": "Explore top posts about Logging",
        "url": "https://app.daily.dev/tags/logging?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "xL0s4-HfRxNy2ru0jiIWR": {
    "title": "Serilog",
    "description": "Serilog is a third-party logging library for [ASP.NET](http://ASP.NET) Core that allows developers to easily create structured and searchable log data. It is built on top of the `Microsoft.Extensions.Logging` framework, which is included in [ASP.NET](http://ASP.NET) Core. Serilog provides features such as automatic logging of request and response data, and the ability to write logs to a variety of destinations, including the console, files, and various logging services. It also supports for filtering and formatting log messages.\n\nFor more resources, visit the following links:",
    "links": [
      {
        "title": "Complete guide to Serilog in ASP.NET",
        "url": "https://github.com/serilog/serilog-aspnetcore",
        "type": "opensource"
      },
      {
        "title": "How to Work with Serilog in ASP.NET?",
        "url": "https://www.codeguru.com/dotnet/serilog-c-sharp/",
        "type": "article"
      },
      {
        "title": "Advanced Serilog features in ASP.NET",
        "url": "https://www.infoworld.com/article/3624022/how-to-use-advanced-serilog-features-in-aspnet-core-mvc.html",
        "type": "article"
      }
    ]
  },
  "ykF2bB_68AhCOzeQ_QSW1": {
    "title": "NLog",
    "description": "NLog is an open-source logging library for .NET applications, including [ASP.NET](http://ASP.NET). It is designed to be easy to use, highly configurable, and extensible, and it provides a number of features that help developers to log and analyze data in their applications.\n\nNLog is a powerful, flexible, and easy-to-use logging library that can be used in [ASP.NET](http://ASP.NET) applications to provide detailed log data. It allows developers to easily configure their logging pipeline, and to write log data to a variety of destinations, making it easier to analyze and troubleshoot issues in the application.\n\nFor more resources, visit the following links:",
    "links": [
      {
        "title": "Logging with NLog in ASP.NET",
        "url": "https://codewithmukesh.com/blog/logging-with-nlog-in-aspnet-core/",
        "type": "article"
      },
      {
        "title": "Introduction To NLog With ASP.NET Core",
        "url": "https://www.c-sharpcorner.com/article/introduction-to-nlog-with-asp-net-core2/",
        "type": "article"
      },
      {
        "title": "Tutorial of Nlog with ASP.NET",
        "url": "https://www.youtube.com/watch?v=PnlxRmHg0lU",
        "type": "video"
      }
    ]
  },
  "GLkDH0X0uy8_1DIdCzbUD": {
    "title": "API Clients and Communication",
    "description": "API clients in [ASP.NET](http://ASP.NET) are software libraries that allow applications to interact with external APIs. They provide a set of methods and classes that make it easy to send requests to an API and process the responses.\n\nAPI clients can be used to access a wide variety of services, such as web services, cloud services, and social media platforms. They can be used to perform tasks such as fetching data, posting updates, and deleting resources.\n\nAPI clients in [ASP.NET](http://ASP.NET) are typically built using the HttpClient class, which is part of the System.Net.Http namespace. This class provides a set of methods for sending HTTP requests and receiving HTTP responses.\n\nVisit the following links to learn more:",
    "links": [
      {
        "title": "How to Call a Web API From a .NET Client",
        "url": "https://learn.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client",
        "type": "article"
      },
      {
        "title": "Overview of Web API REST Service in ASP.NET",
        "url": "https://www.c-sharpcorner.com/article/consuming-asp-net-web-api-rest-service-in-asp-net-mvc-using-http-client/",
        "type": "article"
      },
      {
        "title": "Building an ASP.NET Web API With ASP.NET",
        "url": "https://www.toptal.com/asp-dot-net/asp-net-web-api-tutorial",
        "type": "article"
      }
    ]
  },
  "KJCtxH3mYsZq3hfBZ6cJF": {
    "title": "REST",
    "description": "REST (Representational State Transfer) is an architectural style for building web services. It is based on the principles of the HTTP protocol, and it uses the conventions of HTTP to create a standard interface for interacting with web services.\n\nIn [ASP.NET](http://ASP.NET), REST can be used to create web services that expose data in a standardized way. RESTful web services in [ASP.NET](http://ASP.NET) are typically built using the Web API framework, which provides a set of libraries and tools for building RESTful web services.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "What is REST Services in ASP.NET?",
        "url": "http://www.codedigest.com/quick-start/16/what-is-rest-services-how-to-create-rest-services-in-aspnet",
        "type": "article"
      },
      {
        "title": "What are RESTful APIs?",
        "url": "https://www.pragimtech.com/blog/blazor/what-are-restful-apis/",
        "type": "article"
      },
      {
        "title": "Explore top posts about REST API",
        "url": "https://app.daily.dev/tags/rest-api?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Tutorial of Rest and Restful API",
        "url": "https://www.youtube.com/watch?v=4r1CIUs5s2I",
        "type": "video"
      }
    ]
  },
  "w5RnrhsP4p-AdSOLYVAY9": {
    "title": "Gridlify",
    "description": "Gridify offers a powerful string-based dynamic LINQ query language that is both simple and easy to use. Gridify is a dynamic LINQ library that simplifies the process of converting strings to LINQ queries. Gridify makes it effortless to apply filtering, sorting, and pagination using text-based data. It also has a Javascript/Typescript client to integrate the Gridify with the frontend tables.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Gridify Library",
        "url": "https://github.com/alirezanet/Gridify",
        "type": "opensource"
      },
      {
        "title": "Working with Dynamic Filters Using Gridify in .NET",
        "url": "https://levelup.gitconnected.com/working-with-dynamic-filters-using-gridify-in-net-6bba618dd9f8",
        "type": "article"
      }
    ]
  },
  "YojZ5fpzw-5WgoqqkO6wl": {
    "title": "Odata",
    "description": "OData (Open Data Protocol) is a web protocol for querying and updating data. It is an open standard for creating and consuming RESTful web services. OData is built on top of the HTTP protocol, and it uses the conventions of REST to expose data through a standard interface.\n\nIn [ASP.NET](http://ASP.NET), OData can be used to create RESTful web services that expose data in a standardized way. OData provides a set of conventions for defining the structure of the data, and it also provides a set of conventions for querying and updating the data.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Create an OData v4 Endpoint Using ASP.NET",
        "url": "https://learn.microsoft.com/en-us/aspnet/web-api/overview/odata-support-in-aspnet-web-api/odata-v4/create-an-odata-v4-endpoint",
        "type": "article"
      },
      {
        "title": "Example of OData Protocol With ASP.NET Core",
        "url": "https://www.youtube.com/watch?v=L9HdnNCi0R0",
        "type": "video"
      }
    ]
  },
  "BdTQ5ZMNDNZvkAUoCfL5H": {
    "title": "GraphQL",
    "description": "GraphQL is a query language for your API that allows clients to define the structure of the data they need, and the server will return only the requested data. It is an alternative to RESTful web services, and it is gaining popularity because of its flexibility and efficiency.\n\nIn [ASP.NET](http://ASP.NET), GraphQL can be used to create web services that expose data in a more flexible and efficient way. There are several libraries available to implement GraphQL in an [ASP.NET](http://ASP.NET) application, such as [GraphQL.NET](http://GraphQL.NET), Hot Chocolate, and others. These libraries provide a set of classes and methods that make it easy to create a GraphQL schema, handle requests, and generate responses.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "How to implement GraphQL in ASP.Net",
        "url": "https://blog.christian-schou.dk/how-to-implement-graphql-in-asp-net-core/",
        "type": "article"
      },
      {
        "title": "Intro to GraphQL",
        "url": "https://graphql-dotnet.github.io/docs/getting-started/introduction/",
        "type": "article"
      },
      {
        "title": "Developing API In .NET Core With GraphQL",
        "url": "https://www.c-sharpcorner.com/article/building-api-in-net-core-with-graphql2/",
        "type": "article"
      },
      {
        "title": "Explore top posts about GraphQL",
        "url": "https://app.daily.dev/tags/graphql?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "Efxu9gDodODMTKJbWcXzB": {
    "title": "GraphQL .NET",
    "description": "GraphQL is a query language for your API, it allows clients to define the structure of the data they need, and the server will return only the requested data. It is an alternative to RESTful web services, and it is gaining popularity because of its flexibility and efficiency.\n\nIn [ASP.NET](http://ASP.NET), GraphQL can be used to create web services that expose data in a more flexible and efficient way. [GraphQL.NET](http://GraphQL.NET) is a popular open-source library that can be used to create GraphQL services in [ASP.NET](http://ASP.NET). This library provides a set of classes and methods that make it easy to create a GraphQL schema, handle requests, and generate responses. Learn more from the following resources:",
    "links": [
      {
        "title": "Introduction to GraphQL .NET in ASP.NET",
        "url": "https://graphql-dotnet.github.io/docs/getting-started/introduction/",
        "type": "article"
      },
      {
        "title": "How to use GraphQL in .NET?",
        "url": "https://softchris.github.io/pages/dotnet-graphql.html",
        "type": "article"
      },
      {
        "title": "Building and consuming GraphQL API in ASP.NET",
        "url": "https://www.red-gate.com/simple-talk/development/dotnet-development/building-and-consuming-graphql-api-in-asp-net-core-5/",
        "type": "article"
      },
      {
        "title": "Explore top posts about GraphQL",
        "url": "https://app.daily.dev/tags/graphql?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "XMrQx9JH0eSQJpMzhvy0F": {
    "title": "HotChocolate",
    "description": "Hot Chocolate is a GraphQL server implementation for .NET and .NET Core. It is an open-source library that provides a simple and flexible way to build GraphQL APIs in [ASP.NET](http://ASP.NET).\n\nHot Chocolate provides a set of classes and methods that make it easy to create a GraphQL schema, handle requests, and generate responses. It also provides a number of features to help with things such as validation, authorization, caching, and more.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "Getting started with HotChocolate",
        "url": "https://learn.microsoft.com/en-us/shows/on-net/getting-started-with-hotchocolate",
        "type": "article"
      },
      {
        "title": "ASP.NET Core and HotChocolate",
        "url": "https://chillicream.com/docs/hotchocolate/v12/api-reference/aspnetcore",
        "type": "article"
      },
      {
        "title": "Intro to HotChocolate",
        "url": "https://chillicream.com/docs/hotchocolate",
        "type": "article"
      }
    ]
  },
  "x3SJlLc19DNJ-PyDOOj_G": {
    "title": "gRPC",
    "description": "gRPC is a high-performance, open-source framework for building remote procedure call (RPC) APIs. It uses the Protocol Buffers data serialization format and the HTTP/2 protocol to create highly efficient and scalable APIs. gRPC supports a variety of programming languages, including C# and [ASP.NET](http://ASP.NET).\n\nIn [ASP.NET](http://ASP.NET), gRPC can be used to create high-performance, low-latency APIs for a variety of use cases. gRPC allows for bi-directional streaming of data, which can be useful for real-time applications such as gaming, financial trading, and more.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "Overview for gRPC on .NET",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "Getting Started with ASP.NET Core and gRPC",
        "url": "https://blog.jetbrains.com/dotnet/2021/07/19/getting-started-with-asp-net-core-and-grpc/",
        "type": "article"
      },
      {
        "title": "Create a gRPC client & server in ASP.NET",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/tutorials/grpc/grpc-start?view=aspnetcore-7.0&tabs=visual-studio",
        "type": "article"
      },
      {
        "title": "Explore top posts about gRPC",
        "url": "https://app.daily.dev/tags/grpc?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "9Vv3OxafB6BlHhi1ZkeVO": {
    "title": "Real-Time Communication",
    "description": "Real-time communication in [ASP.NET](http://ASP.NET) refers to the ability to send and receive data between a client and a server in real-time, typically with low latency. It allows the server to push updates to the client as they happen, instead of the client having to continuously poll the server for updates.\n\nThere are several technologies and libraries available for implementing real-time communication in [ASP.NET](http://ASP.NET), such as WebSockets, SignalR, gRPC, and more.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "Overview of ASP.NET Core SignalR",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "Real-time ASP.NET with SignalR",
        "url": "https://dotnet.microsoft.com/en-us/apps/aspnet/signalr",
        "type": "article"
      }
    ]
  },
  "tBl8neu3tJd5GPwGfJbjZ": {
    "title": "Web Sockets",
    "description": "WebSockets is a protocol that allows for real-time, bidirectional communication between a client and a server. It is based on the same principle as HTTP, but it uses a different protocol to establish and maintain a connection between the client and the server. Once a connection is established, WebSockets enables the client and server to send messages to each other in real-time.\n\nIn [ASP.NET](http://ASP.NET), WebSockets can be used to create real-time, highly interactive web applications. The [ASP.NET](http://ASP.NET) Core framework provides built-in support for WebSockets through the Microsoft.AspNetCore.WebSockets package. This package provides a set of classes and methods that make it easy to create and manage WebSockets connections.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "WebSockets support in ASP.NET",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/fundamentals/websockets?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "Understanding WebSockets with ASP.NET",
        "url": "https://sahansera.dev/understanding-websockets-with-aspnetcore-5/",
        "type": "article"
      },
      {
        "title": "Writing a WebSocket server in ASP.NET",
        "url": "https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_server",
        "type": "article"
      }
    ]
  },
  "8dvd4M0TKNyQR8dEolGNT": {
    "title": "SignalR Core",
    "description": "SignalR is a real-time communication library for .NET that allows for the creation of real-time web applications. SignalR Core is the latest version of SignalR, which has been rebuilt from the ground up to be cross-platform and lightweight. It allows for bidirectional communication between a client (such as a web page) and a server, enabling real-time updates, notifications, and other interactions. SignalR Core can be used in a variety of scenarios such as chat applications, gaming, and real-time dashboards. It supports multiple transports like WebSockets, Server-Sent Events and Long polling. It also supports for authentication and authorization.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Overview of ASP.NET Core SignalR",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-8.0",
        "type": "article"
      }
    ]
  },
  "9ECykIIvXlDblbFbRVcJS": {
    "title": "Object Mapping",
    "description": "Object mapping in [ASP.NET](http://ASP.NET) refers to the process of converting an object of one type to an object of another type. This can be useful in a number of scenarios, such as when working with domain models and data transfer objects (DTOs) in a layered architecture, or when mapping between different versions of an object or different formats such as JSON and XML.\n\nThere are several libraries available for object mapping in [ASP.NET](http://ASP.NET), such as AutoMapper, ExpressMapper, AgileMapper, AgileMapster and Mapster. These libraries provide a convenient and flexible way to map between objects, using a convention-based approach or a fluent API to configure more complex mappings. They also support for a wide range of mapping scenarios, including nested and circular object graphs, collections, and different types of inheritance.\n\nVisit the following links to learn more:",
    "links": [
      {
        "title": "Building a Fast Object-to-Object Mapper in .NET",
        "url": "https://www.twilio.com/blog/building-blazing-fast-object-mapper-c-sharp-net-core",
        "type": "article"
      },
      {
        "title": "Overview of Object Mapping in ASP.NET",
        "url": "https://docs.abp.io/en/abp/latest/Object-To-Object-Mapping",
        "type": "article"
      },
      {
        "title": "Comparison of Object Mapper Libraries",
        "url": "https://www.simplilearn.com/tutorials/asp-dot-net-tutorial/automapper-in-c-sharp",
        "type": "article"
      }
    ]
  },
  "GPmlueMnuLCUW_t4jvGhc": {
    "title": "AutoMapper",
    "description": "AutoMapper is a library for .NET that allows you to easily map between objects of different types. It is particularly useful when working with domain models and data transfer objects (DTOs) in a layered architecture. It can also be used to map between different versions of an object, or to map between objects in different formats, such as JSON and XML.\n\nAutoMapper uses a convention-based approach to mapping, which means that it automatically maps properties with the same name and type from one object to another. It also provides a fluent API for configuring more complex mappings, such as ignoring certain properties, using custom logic to map properties, or mapping properties based on a value in another property.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "What is Automapper in ASP.NET?",
        "url": "https://www.simplilearn.com/tutorials/asp-dot-net-tutorial/automapper-in-c-sharp",
        "type": "article"
      },
      {
        "title": "Getting Started with AutoMapper in ASP.NET",
        "url": "https://code-maze.com/automapper-net-core/",
        "type": "article"
      },
      {
        "title": "Examples of AutoMapper in ASP.NET",
        "url": "https://dotnettutorials.net/lesson/automapper-in-c-sharp/",
        "type": "article"
      }
    ]
  },
  "x0OopRTwIvoWgT8qi0CE9": {
    "title": "Mapperly",
    "description": "",
    "links": []
  },
  "oMMBzRrHkUymxAR4oqr75": {
    "title": "Manual Mapping",
    "description": "Manual object mapping in [ASP.NET](http://ASP.NET) Core means explicitly assigning values from one object to another without using third-party libraries like AutoMapper. This approach gives you full control over how properties are mapped and allows for custom transformations if needed.\n\nFor instance, if an **Employee** entity has properties such as Id, Name, Email, and Department, and we need to convert it into an **EmployeeDTO** without exposing sensitive data like Id, a manual mapping method can selectively map only the necessary fields. However, it comes with trade-offs, such as increased boilerplate code and the need for manual updates whenever the data model changes. In a real-world [ASP.NET](http://ASP.NET) Core application, manual mapping can be implemented using static helper methods or extension methods that take an entity as input and return a DTO, ensuring that the mapping logic remains centralized and reusable across different parts of the application.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "Manual vs Automapping in ASP.NET?",
        "url": "https://medium.com/@anderson.buenogod/manual-vs-automated-mapping-in-c-which-approach-is-best-for-your-project-50de1fd73bfa",
        "type": "article"
      }
    ]
  },
  "s57tKy1rajlJbKFDVXLqs": {
    "title": "Task Scheduling",
    "description": "Task scheduling in [ASP.NET](http://ASP.NET) refers to the process of scheduling and executing background tasks in an application. This can include tasks such as sending emails, processing data, generating reports, or performing maintenance tasks.\n\nIn [ASP.NET](http://ASP.NET), task scheduling can be implemented using a variety of libraries and frameworks such as [Quartz.NET](http://Quartz.NET), Hangfire, Coravel and Microsoft's built-in IHostedService interface. These libraries and frameworks provide a way to schedule tasks to run at specific times or intervals, and also provide APIs for managing and monitoring the progress of scheduled tasks.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "How schedule Tasks in ASP.NET?",
        "url": "https://beansoftware.com/ASP.NET-Tutorials/Scheduled-Tasks.aspx",
        "type": "article"
      },
      {
        "title": "Task Scheduling in ASP.NET",
        "url": "https://www.youtube.com/watch?v=Vg4AOpb7OqA",
        "type": "video"
      }
    ]
  },
  "uP1nqbmFmZL_wA2DoqP8C": {
    "title": "Native Background Service",
    "description": "A Native Background Service in [ASP.NET](http://ASP.NET) is a type of service that can run in the background on a device, without the need for an active user session. These services are typically used for tasks that need to run continuously, such as sending notifications, polling for updates, or processing data.\n\nIn [ASP.NET](http://ASP.NET), a Native Background Service can be implemented using the IHostedService interface, which is part of the Microsoft.Extensions.Hosting namespace. This interface allows you to create a background service that can run continuously, even when the main application is not running.\n\nVisit the following links to learn more:",
    "links": [
      {
        "title": "Background tasks with hosted services in ASP.NET",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-7.0&tabs=visual-studio",
        "type": "article"
      },
      {
        "title": "BackgroundService in ASP.NET Core",
        "url": "https://medium.com/@daniel.sagita/backgroundservice-for-a-long-running-work-3debe8f8d25b",
        "type": "article"
      },
      {
        "title": "Tutorial on Background Tasks in ASP.NET",
        "url": "https://youtube.com/watch?v=rugxQIH_p3A",
        "type": "video"
      }
    ]
  },
  "QiQsx1udyKcPJ-lZjRQVy": {
    "title": "Hangfire",
    "description": "Hangfire is an open-source, lightweight library for .NET that allows you to easily perform background processing in your [ASP.NET](http://ASP.NET) application. It provides a simple and elegant way to run background jobs, schedule future tasks, and monitor the progress of your background jobs.\n\nHangfire uses a storage backend, such as SQL Server or Redis, to persist the state of your background jobs. This allows you to easily scale your background processing and to monitor and manage your background jobs, even if your application restarts or crashes.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Hangfire with ASP.NET Core",
        "url": "https://code-maze.com/hangfire-with-asp-net-core/",
        "type": "article"
      },
      {
        "title": "Intro to Hangfire",
        "url": "https://www.partech.nl/nl/publicaties/2021/05/a-beginners-guide-to-hangfire",
        "type": "article"
      },
      {
        "title": "How to use Hangfire with ASP.NET",
        "url": "https://blog.christian-schou.dk/how-to-use-hangfire-with-asp-net-core-5-0-api/",
        "type": "article"
      }
    ]
  },
  "zOWlPXIl4XPs_0pA8-yi5": {
    "title": "Quartz",
    "description": "Quartz is an open-source, job scheduling library for .NET that can be used in [ASP.NET](http://ASP.NET) applications. It is based on the popular Quartz scheduler for Java, and provides a similar feature set for scheduling and executing background jobs in .NET applications.\n\nWith Quartz, you can schedule jobs to run at specific times or intervals, and you can also set up triggers to start a job based on certain events. Quartz also provides a rich set of options for configuring and managing your jobs, such as pausing, resuming, and canceling jobs, as well as job chaining and priorities.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Intro to Quartz in ASP.NET",
        "url": "https://aspnetboilerplate.com/Pages/Documents/Quartz-Integration",
        "type": "article"
      },
      {
        "title": "How to work with Quartz.Net in ASP.NET",
        "url": "https://www.infoworld.com/article/3078781/how-to-work-with-quartz-net-in-c.html",
        "type": "article"
      }
    ]
  },
  "p3bZnKIyRgLmB764Kkhju": {
    "title": "Coravel",
    "description": "Coravel is an open-source, lightweight library for .NET that allows you to easily perform background processing and scheduling in your [ASP.NET](http://ASP.NET) Core application. It provides a simple and elegant way to schedule tasks, run background jobs, and manage queues in your application.\n\nCoravel is inspired by Laravel's task scheduler and it's built on top of the .NET Core built-in Dependency Injection. It uses a fluent API to schedule tasks, allowing you to easily specify the frequency, start time, and end time of the task. It also provides a simple way to queue and process background jobs, allowing you to easily process large amounts of data or perform long-running tasks.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Documentation of Coravel",
        "url": "https://docs.coravel.net/",
        "type": "article"
      },
      {
        "title": "ASP.NET Task Scheduling with Coravel",
        "url": "https://www.youtube.com/watch?v=vu0fxlWl0wo",
        "type": "video"
      },
      {
        "title": "How to Run a .Net Console App with Coravel",
        "url": "https://www.youtube.com/watch?v=KQpw_OYkKq8",
        "type": "video"
      }
    ]
  },
  "XofWWhlU_vWCG5oXVMZze": {
    "title": "Testing",
    "description": "Testing in [ASP.NET](http://ASP.NET) is the process of evaluating the performance, functionality, and overall correctness of an application developed using the [ASP.NET](http://ASP.NET) framework. There are several types of testing that can be performed on an [ASP.NET](http://ASP.NET) application, including unit testing, integration testing, acceptance testing and E2E testing. Each type of testing has a different focus and is used at a different stage of the development process. Common testing frameworks for [ASP.NET](http://ASP.NET) include MSTest, XUnit, NUnit, Selenium, Playwright, Puppeteer, Cypress, Specflow, Cucumber, and LightBDD.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "A Complete Tutorial on ASP.NET Testing",
        "url": "https://www.lambdatest.com/blog/aspnet-testing/",
        "type": "article"
      },
      {
        "title": "Unit test controller logic in ASP.NET",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/testing?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "Integration tests in ASP.NET Core",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "Explore top posts about Testing",
        "url": "https://app.daily.dev/tags/testing?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "AtyL0ij8FeJCBmqG2YvTO": {
    "title": "Playwright",
    "description": "Playwright is an open-source library for automating web browsers built by Microsoft, similar to Selenium, it's commonly used for testing web applications. It's built on top of the .NET Core runtime and it provides bindings for C#, it allows developers to write tests for web applications in C# or other .NET languages. Playwright is designed to be fast and reliable and allows developers to run tests in multiple browsers.\n\nTo learn more, visit the following:",
    "links": [
      {
        "title": "Playwright for .NET",
        "url": "https://github.com/microsoft/playwright-dotnet",
        "type": "opensource"
      },
      {
        "title": "How to test Apps with Playwright and .NETs",
        "url": "https://www.twilio.com/blog/test-web-apps-with-playwright-and-csharp-dotnet",
        "type": "article"
      },
      {
        "title": "End-to-End Tests With ASP.NET and Playwright",
        "url": "https://khalidabuhakmeh.com/end-to-end-test-with-aspnet-core-xunit-and-playwright",
        "type": "article"
      }
    ]
  },
  "UCpoLiQJ4LeniI9x3uGcY": {
    "title": "Puppeteer",
    "description": "Puppeteer is an open-source library for automating web browsers, similar to Selenium and Playwright. It's built on top of the Chrome DevTools protocol and it provides a set of APIs that allows developers to interact with web browsers and simulate user interactions, such as clicking buttons, filling out forms, and navigating between pages. It's commonly used for testing web applications, web scraping, and generating screenshots and PDFs of web pages. Puppeteer for .NET is built on top of the .NET Core runtime and it provides bindings for C# and allows developers to write tests for web applications in C# or other .NET languages.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Why use Puppeteer?",
        "url": "https://www.kiltandcode.com/puppeteer-sharp-crawl-the-web-using-csharp-and-headless-chrome/",
        "type": "article"
      },
      {
        "title": "Documentations of Puppeteer",
        "url": "https://www.puppeteersharp.com/",
        "type": "article"
      },
      {
        "title": "Explore top posts about Crawling",
        "url": "https://app.daily.dev/tags/crawling?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "f2UP2jDnDr7XEFIdAtBhH": {
    "title": "Cypress",
    "description": "Cypress is an open-source end-to-end testing framework for web applications, it's built on top of JavaScript and provides a set of APIs that allows developers to automate browser interactions. It's commonly used for testing web applications, as it can be used to automate browser-based tests and assert that the application behaves as expected. Cypress for .NET is not built on top of the .NET Core runtime and it does not provide bindings for C# or any other .NET languages, it's built on top of JavaScript and can be run in the browser.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Cypress - End To End Testing Tool",
        "url": "https://www.c-sharpcorner.com/article/getting-started-with-cypress-io/",
        "type": "article"
      },
      {
        "title": "Overview of Cypress",
        "url": "https://www.cypress.io/",
        "type": "article"
      },
      {
        "title": "Explore top posts about Cypress",
        "url": "https://app.daily.dev/tags/cypress?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "Xx5G09n4WWnnydCgxnL0A": {
    "title": "WebApplicationFactory",
    "description": "Web Application Factory (WAF) is a built-in feature of the [ASP.NET](http://ASP.NET) Core framework that allows developers to create and configure a web application in a programmatic way. It provides a simple and flexible way to set up a web application for testing, without the need for a web server or a browser. The WAF can be used to create a test server that can be used to run integration tests or end-to-end tests for an [ASP.NET](http://ASP.NET) Core web application, this allows developers to test the web application in a realistic environment, without the need for a physical web server or a browser. The WAF can be configured to use different services, middleware, and settings, depending on the needs of the application, this allows developers to easily set up a web application that is configured specifically for testing. The WAF also allows developers to test the web application against different configurations, such as different databases, different authentication providers, and different hosting environments.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Integration tests in ASP.NET Core",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "How to use WebApplicationFactory in .NET",
        "url": "https://stackoverflow.com/questions/69058176/how-to-use-webapplicationfactory-in-net6-without-speakable-entry-point",
        "type": "article"
      },
      {
        "title": "Integration Testing ASP.NET Core WebAPI Applications",
        "url": "https://www.youtube.com/watch?v=xs8gNQjCXw0",
        "type": "video"
      }
    ]
  },
  "8eW5BaOjJbnQ7uk4zMOiU": {
    "title": "Test Containers",
    "description": "",
    "links": []
  },
  "Ohc0xzI6qX4hOFVNfRj1F": {
    "title": ".NET Aspire",
    "description": "",
    "links": []
  },
  "TCswZHviRiu6SIOwUisu8": {
    "title": "Respawn",
    "description": "",
    "links": []
  },
  "9WZmjiFowydYrkHQ2xeNm": {
    "title": "Specflow",
    "description": "SpecFlow is an open-source tool that allows developers to create automated acceptance tests in a natural language format, such as Gherkin. SpecFlow is commonly used in the context of [ASP.NET](http://ASP.NET) and other .NET technologies, to write acceptance tests for web applications. With SpecFlow, developers can write test scenarios using plain text in the Gherkin syntax, which uses a Given-When-Then format to describe the steps of a test. These scenarios can be written by non-technical stakeholders, such as business analysts or product owners, and can be easily understood by anyone who reads them. SpecFlow then converts these Gherkin scenarios into executable tests, which can be run using a variety of test runners, such as NUnit, xUnit, or MSTest. The tool also provides a set of bindings that allow developers to map the steps in the Gherkin scenarios to code in their application, making it easy to test specific functionality. Additionally, SpecFlow provides a set of advanced features, such as support for parameterized tests, background steps, and hooks, which allows developers to create more complex and powerful tests.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "SpecFlow’s documentation",
        "url": "https://docs.specflow.org/_/downloads/specflow/en/latest/pdf/",
        "type": "article"
      },
      {
        "title": "Getting Started with SpecFlow",
        "url": "https://docs.specflow.org/projects/getting-started/en/latest/index.html",
        "type": "article"
      },
      {
        "title": "What is SpecFlow?",
        "url": "https://specflow.org/tools/specflow/",
        "type": "article"
      }
    ]
  },
  "aWRv5sU9dksgcpE9RGJb1": {
    "title": "Light BDD",
    "description": "LightBDD is an open-source, lightweight, and easy-to-use BDD (Behavior-Driven Development) framework for .NET, which allows developers to write automated acceptance tests in a simple and readable format. LightBDD is commonly used in the context of [ASP.NET](http://ASP.NET) and other .NET technologies, to write acceptance tests for web applications. LightBDD is designed to provide a simple, yet powerful, way to write BDD tests. It allows developers to write tests using a fluent API, which allows them to describe the behavior of their application in a natural language format. The framework also provides a set of extension methods, which can be used to add additional functionality, such as validating the output of a test, logging test results, or integrating with other testing tools. LightBDD also comes with a built-in test runner, which makes it easy to execute tests and view the results. The framework supports a variety of test runners, such as NUnit, xUnit, and MSTest, and can be integrated with other BDD frameworks, such as SpecFlow and Cucumber.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "The Lightweight Behavior Driven Development test framework",
        "url": "https://github.com/LightBDD/LightBDD",
        "type": "opensource"
      },
      {
        "title": "Explore top posts about Testing",
        "url": "https://app.daily.dev/tags/testing?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Getting started with Behavior Driven Development (BDD) in .NET",
        "url": "https://www.youtube.com/watch?v=EEeVU0z26u0",
        "type": "video"
      },
      {
        "title": "Introduction To BDD using SpecFlow in ASP.NET",
        "url": "https://www.youtube.com/watch?v=8KPrhBqZ-kk",
        "type": "video"
      }
    ]
  },
  "R8C6s53RYjkRVma0nCJpy": {
    "title": "XUnit",
    "description": "xUnit is a unit testing framework for the .NET framework, it's an open-source testing framework that provides a set of attributes and classes that can be used to create unit tests. In the context of [ASP.NET](http://ASP.NET), xUnit can be used to write unit tests for web applications built using the [ASP.NET](http://ASP.NET) framework. xUnit provides features such as support for data-driven tests, support for parallel test execution, and support for test discovery and execution, it also provides support for test isolation which allows developers to run tests in isolation from each other. xUnit is a popular alternative to other testing frameworks like MSTest and it does not rely on a test runner, instead relies on a console runner that can be run from the command line.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Unit Testing with xUnit in ASP.NET Core",
        "url": "https://code-maze.com/aspnetcore-unit-testing-xunit/",
        "type": "article"
      },
      {
        "title": "Unit testing in .NET Core using and xUnit",
        "url": "https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test",
        "type": "article"
      },
      {
        "title": "Getting Started With Unit Testing Using ASP.NET And xUnit",
        "url": "https://www.c-sharpcorner.com/article/getting-started-with-unit-testing-using-c-sharp-and-xunit/",
        "type": "article"
      }
    ]
  },
  "qHYBlBCvCGUZGh6gyEI63": {
    "title": "NUnit",
    "description": "NUnit is a unit testing framework for the .NET framework, it's an open-source testing framework that provides a set of attributes and classes that can be used to create unit tests. In the context of [ASP.NET](http://ASP.NET), NUnit can be used to write unit tests for web applications built using the [ASP.NET](http://ASP.NET) framework. NUnit provides features such as support for data-driven tests, support for parallel test execution, and support for test discovery and execution, it also provides support for test isolation which allows developers to run tests in isolation from each other. NUnit is a popular alternative to other testing frameworks like MSTest and xUnit and it has a similar syntax as JUnit and it's considered as one of the oldest testing frameworks for .NET.\n\nVisit the following links for more resources:",
    "links": [
      {
        "title": "NUnit With C#",
        "url": "https://www.c-sharpcorner.com/UploadFile/84c85b/nunit-with-C-Sharp/",
        "type": "article"
      },
      {
        "title": "Unit testing C# with NUnit and .NET Core",
        "url": "https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit",
        "type": "article"
      }
    ]
  },
  "zhn-VLGPfV6FZT2OMl6zf": {
    "title": "Shouldly",
    "description": "Shouldly is a .NET library that provides a set of extension methods for writing expressive and readable assertions in unit tests, it's designed to be an alternative to traditional assertion libraries. In the context of [ASP.NET](http://ASP.NET), Shouldly can be used in conjunction with test frameworks such as MSTest, xUnit, and NUnit to write more expressive and readable unit tests for the application. It provides advanced features such as support for collection-specific assertions, support for asynchronous code, and support for custom types, also includes options to customize the error message.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "How to Use Shouldly to Improve Unit Tests in .NET?",
        "url": "https://code-maze.com/improve-unit-tests-shouldly-dotnet/",
        "type": "article"
      },
      {
        "title": "Improve Test Asserts with Shouldly",
        "url": "https://visualstudiomagazine.com/articles/2015/08/01/improve-test-asserts-with-shouldly.aspx?admgarea=ALM",
        "type": "article"
      }
    ]
  },
  "iZCxinqlVefBk5-ICqt4v": {
    "title": "NSubstitute",
    "description": "NSubstitute is a popular open-source .NET library that allows developers to create mock objects for use in unit testing, it is a powerful and flexible substitute for traditional mocking frameworks such as Moq and Rhino Mocks. In the context of [ASP.NET](http://ASP.NET), NSubstitute can be used to create mock objects for testing web applications built using the [ASP.NET](http://ASP.NET) framework, it provides a simple and intuitive syntax for creating mock objects, setting up mock behavior, and making assertions on calls made to the mock objects. NSubstitute supports a wide range of testing frameworks and test runners, including MSTest, NUnit, and xUnit and it also supports various platforms including .NET Framework, .NET Core, Xamarin and Unity.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Overview of NSubstitute",
        "url": "https://github.com/nsubstitute/NSubstitute",
        "type": "opensource"
      },
      {
        "title": "Getting started NSubstitute",
        "url": "https://nsubstitute.github.io/help/getting-started/",
        "type": "article"
      }
    ]
  },
  "eyOXWb1kL80Wqiwc2WHd_": {
    "title": "Moq",
    "description": "Moq is an open-source library for .NET that allows developers to create mock objects for use in unit testing, it is a popular mocking framework that provides a simple and intuitive syntax for creating mock objects and setting up mock behavior. In the context of [ASP.NET](http://ASP.NET), Moq can be used to create mock objects for testing web applications built using the [ASP.NET](http://ASP.NET) framework, it provides a simple and expressive syntax for creating mock objects and setting up mock behavior. Moq supports a wide range of testing frameworks, including MSTest, NUnit, and xUnit and it also supports various platforms including .NET Framework, .NET Core and Xamarin. Moq is lightweight and easy to use, making it a good choice for developers who are new to mocking and unit testing, it also provides a rich set of features, such as support for setting up mock behavior, making assertions on calls made to the mock objects, and more.\n\nVisit the following links to learn more:",
    "links": [
      {
        "title": "What is use of Moq?",
        "url": "https://stackoverflow.com/questions/678878/what-is-use-of-moq",
        "type": "article"
      },
      {
        "title": "Moq - Unit Test In .NET Core App",
        "url": "https://www.c-sharpcorner.com/article/moq-unit-test-net-core-app-using-mock-object/",
        "type": "article"
      },
      {
        "title": "Getting started with Mocking using Moq in .NET",
        "url": "https://www.youtube.com/watch?v=9ZvDBSQa_so",
        "type": "video"
      }
    ]
  },
  "diRJ_F6kx42Ucs0fxidtZ": {
    "title": "FakeItEasy",
    "description": "FakeItEasy is an open-source library for .NET that allows developers to create fake objects for use in unit testing, it is a powerful and easy-to-use mocking framework that provides a simple and intuitive syntax for creating fake objects and setting up fake behavior. In the context of [ASP.NET](http://ASP.NET), FakeItEasy can be used to create fake objects for testing web applications built using the [ASP.NET](http://ASP.NET) framework, it provides a simple and expressive syntax for creating fake objects and setting up fake behavior. FakeItEasy supports a wide range of testing frameworks, including MSTest, NUnit, and xUnit. FakeItEasy is lightweight and easy to use, making it a good choice for developers who are new to mocking and unit testing, it also provides a rich set of features, such as support for setting up fake behavior, making assertions on calls made to the fake objects, and more. It also has a wide range of extension points for customizing the fakes to suit different needs.\n\nVisit the following links to learn more:",
    "links": [
      {
        "title": "Easy mocking in C# code with FakeItEasy library",
        "url": "https://devislandblog.wordpress.com/2018/05/09/easy-mocking-in-c-code-with-fakeiteasy-library/",
        "type": "article"
      },
      {
        "title": "FakeItEasy when testing ASP.NET Core controllers",
        "url": "https://stackoverflow.com/questions/56170818/how-to-fake-an-interface-method-dynamically-with-fakeiteasy-when-testing-asp-net",
        "type": "article"
      }
    ]
  },
  "K49M_7gSpfJuZaE6WaHxQ": {
    "title": "AutoFixture",
    "description": "",
    "links": []
  },
  "QERTjawqCCCkHfR44Ca0s": {
    "title": "Bogus",
    "description": "",
    "links": []
  },
  "37c2eCvRdebztkbc5AjYp": {
    "title": "Microservices",
    "description": "Microservices are a software architectural style in which a large application is built as a set of small, independent services that communicate with each other through APIs. These services are typically built using different technologies and run in their own processes, and can be deployed, scaled, and updated independently.\n\nIn [ASP.NET](http://ASP.NET), microservices can be built using the .NET Core framework, which is a cross-platform, open-source version of the .NET framework that can run on Windows, Linux, and macOS. Each microservice can be built as a self-contained, small web application that handles a specific set of functionality, such as user management, product catalog, or order processing.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Intro to Microservices Using ASP.NET Core",
        "url": "https://www.c-sharpcorner.com/article/microservice-using-asp-net-core/",
        "type": "article"
      },
      {
        "title": "Advantages and Disadvantages of Microservices Architecture",
        "url": "https://www.dotnettricks.com/learn/microservices/architecture-example-advantages",
        "type": "article"
      },
      {
        "title": "Explore top posts about Microservices",
        "url": "https://app.daily.dev/tags/microservices?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "sNYYEBMHV_NO_NToP51VY": {
    "title": "ActiveMQ",
    "description": "ActiveMQ is an open-source message broker written in Java that implements the Java Message Service (JMS) API. It can be used to send and receive messages between different applications in a loosely coupled, asynchronous manner. ActiveMQ supports a variety of messaging protocols, including JMS, AMQP, STOMP, MQTT, and OpenWire.\n\nIn the context of an [ASP.NET](http://ASP.NET) application, ActiveMQ can be used to send and receive messages to and from other systems. For example, it can be used to send messages from a web application to a background service, or to send messages between different microservices.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "What Is ActiveMQ And How Can You Use It?",
        "url": "https://www.c-sharpcorner.com/article/what-is-activemq-and-how-can-you-use-it/",
        "type": "article"
      },
      {
        "title": "Messaging with .NET and ActiveMQ",
        "url": "https://remark.wordpress.com/articles/messaging-with-net-and-activemq/",
        "type": "article"
      },
      {
        "title": "Messaging with ActiveMQ and ASP.NET",
        "url": "https://havret.io/activemq-artemis-net-core",
        "type": "article"
      }
    ]
  },
  "L8RkeMYm0WGNeLLcHKF1R": {
    "title": "Kafka",
    "description": "Apache Kafka is an open-source, distributed event streaming platform that is used for building real-time data pipelines and streaming applications. It is designed to handle high volumes of data and to support real-time data processing.\n\nKafka is based on a publish-subscribe model, where producers write data to topics, and consumers read data from those topics. Data is stored in topics in a log-based format, which allows for efficient storage and retrieval of data.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Working with Apache Kafka in ASP.NET",
        "url": "https://www.codemag.com/Article/2201061/Working-with-Apache-Kafka-in-ASP.NET-6-Core",
        "type": "article"
      },
      {
        "title": "Kafka and .NET",
        "url": "https://docs.confluent.io/kafka-clients/dotnet/current/overview.html",
        "type": "article"
      },
      {
        "title": "Explore top posts about Apache",
        "url": "https://app.daily.dev/tags/apache?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "KqvBn2_wvYhFdv0dBZMC9": {
    "title": "RabbitMQ",
    "description": "RabbitMQ is an open-source message broker software that implements the Advanced Message Queuing Protocol (AMQP). It is written in Erlang and can be used to send and receive messages between different applications in a loosely coupled, asynchronous manner. RabbitMQ supports a variety of messaging patterns, including point-to-point, publish-subscribe, and request-response.\n\nIn the context of an [ASP.NET](http://ASP.NET) application, RabbitMQ can be used to send and receive messages to and from other systems. For example, it can be used to send messages from a web application to a background service, or to send messages between different microservices.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "How to Use RabbitMQ in ASP NET?",
        "url": "https://www.freecodespot.com/blog/use-rabbitmq-in-asp-net-core/",
        "type": "article"
      },
      {
        "title": "Introduction of RabbitMQ",
        "url": "https://www.rabbitmq.com/tutorials/tutorial-one-dotnet.html",
        "type": "article"
      },
      {
        "title": "ASP.NET and RabbitMQ",
        "url": "https://referbruv.com/blog/integrating-rabbitmq-with-aspnet-core-quickstart-with-an-example/",
        "type": "article"
      }
    ]
  },
  "8d4f7_3VO03vy7YDWwPI9": {
    "title": "NetMQ",
    "description": "NetMQ is a lightweight, open-source messaging library for building distributed systems and real-time applications in .NET. It provides an API for sending and receiving messages using a variety of messaging patterns and protocols, including request-response, publish-subscribe, and push-pull.\n\nNetMQ is built on top of ZeroMQ, a high-performance, asynchronous messaging library that provides a minimalistic socket-based API for building distributed systems. NetMQ is designed to be easy to use and to abstract away the complexities of ZeroMQ, making it a good choice for developers who want to add messaging capabilities to their [ASP.NET](http://ASP.NET) applications without having to learn a complex API.\n\nVisit the following links to learn more:",
    "links": [
      {
        "title": "Documentation of NetMQ",
        "url": "https://netmq.readthedocs.io/en/latest/introduction/",
        "type": "article"
      },
      {
        "title": "NetMQ and creating a Dynamic Worker in .NET",
        "url": "https://mikaelkoskinen.net/post/netmq-and-creating-a-dynamic-worker-per-task",
        "type": "article"
      }
    ]
  },
  "gBuaVZfqJ0-g21sKohQtx": {
    "title": "Azure Service Bus",
    "description": "Azure Service Bus is a scalable and reliable messaging platform that can handle a high volume of messages, it's also easy to use, has a lot of features like subscription, Topics, Dead Letter, and easy to integrate with other Azure services, and it's a managed service which means Microsoft takes care of the infrastructure and scaling. However, it's worth noting that Azure Service Bus is a paid service and the cost will depend on the number of messages and the size of the data that you are sending and receiving.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Getting Started With Azure Service Bus and ASP.NET Core",
        "url": "https://www.c-sharpcorner.com/article/get-started-with-azure-service-bus-queues-asp-net-core-part-1/",
        "type": "article"
      },
      {
        "title": "How to Send & receive messages from Azure Service Bus queue (.NET)?",
        "url": "https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dotnet-get-started-with-queues?tabs=passwordless",
        "type": "article"
      },
      {
        "title": "What is Azure Service Bus?",
        "url": "https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-overview",
        "type": "article"
      },
      {
        "title": "Explore top posts about Azure",
        "url": "https://app.daily.dev/tags/azure?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "SQKIUa_UsJ4cls-Vs9yHU": {
    "title": "Mass Transit",
    "description": "MassTransit is an open-source, highly configurable service bus framework for building distributed systems using the .NET framework. It allows developers to easily create message-based, loosely-coupled applications by providing a simple and fluent API for defining message contracts, handling messages, and managing message routing.\n\nIt supports multiple messaging transports such as RabbitMQ, Azure Service Bus, Amazon SQS and others, automatic serialization and deserialization of messages, automatic retries and exception handling for failed message deliveries, and support for advanced messaging patterns like publish-subscribe, request-response, and event-driven architectures.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Complete guide to MassTransit",
        "url": "https://github.com/MassTransit/MassTransit",
        "type": "opensource"
      },
      {
        "title": "Using MassTransit with RabbitMQ in ASP.NET Core",
        "url": "https://code-maze.com/masstransit-rabbitmq-aspnetcore/",
        "type": "article"
      }
    ]
  },
  "vf8W1FLhcb3awx4JBaY5r": {
    "title": "NServiceBus",
    "description": "NServiceBus (NSB) is a service bus framework for building distributed systems using the .NET framework. It provides a set of features for building message-based, loosely-coupled applications, including support for message routing, message handling, and message persistence.\n\nNSB supports multiple messaging transports, including MSMQ, RabbitMQ, and Azure Service Bus, and provides support for advanced messaging patterns such as publish-subscribe, request-response, and message-based sagas.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Using NServiceBus in an ASP.NET",
        "url": "https://docs.particular.net/samples/web/send-from-aspnetcore-webapi/",
        "type": "article"
      },
      {
        "title": "Learn NServiceBus from .NET Core",
        "url": "https://www.codeproject.com/Articles/1224839/Learn-NServiceBus-from-NET-Core-WebAPI",
        "type": "article"
      }
    ]
  },
  "X6iSHoHnFFMaGb6YPQFhl": {
    "title": "EasyNetQ",
    "description": "EasyNetQ is a simple and easy-to-use .NET client for RabbitMQ, a popular open-source message broker. It provides a simple and fluent API for connecting to RabbitMQ, publishing and consuming messages, and managing message queues.\n\nEasyNetQ supports a wide range of messaging patterns, such as publish-subscribe, request-response, and message-based sagas, and makes it easy to work with RabbitMQ's advanced features, such as message routing, message persistence, and message acknowledgements.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Overview of EasyNetQ",
        "url": "https://easynetq.com/",
        "type": "article"
      },
      {
        "title": "RabbitMQ with EasyNetQ Tutorials",
        "url": "https://www.youtube.com/watch?v=CqxV_Xn4PlI",
        "type": "video"
      }
    ]
  },
  "2k-rGuhYTTAR9XN3aDAnW": {
    "title": "Ocelot",
    "description": "Ocelot is an open-source API gateway for [ASP.NET](http://ASP.NET) Core. It is designed to work as a reverse proxy, routing incoming requests to the appropriate service and aggregating the responses to return to the client. Ocelot allows you to define routing rules, handle requests and responses, and perform other common API gateway tasks such as rate limiting, caching, and authentication.\n\nOne of the key features of Ocelot is its flexibility, it can route incoming requests to multiple services, aggregate the responses, and return them as a single response to the client. It also allows you to define dynamic routes, based on the request's content, perform request and response transformations, and handle errors.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Implement API Gateways with Ocelot",
        "url": "https://learn.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/implement-api-gateways-with-ocelot",
        "type": "article"
      },
      {
        "title": "Getting Started with Ocelot",
        "url": "https://ocelot.readthedocs.io/en/latest/introduction/gettingstarted.html",
        "type": "article"
      },
      {
        "title": "Building an API Gateway in ASP.NET using Ocelotss",
        "url": "https://www.youtube.com/watch?v=hlUGZ6Hmv6s",
        "type": "video"
      }
    ]
  },
  "2axfolu26P8XwxMxgMaS3": {
    "title": "YARP",
    "description": "YARP is a library to help create reverse proxy servers that are high-performance, production-ready, and highly customizable. YARP is built on .NET using the infrastructure from [ASP.NET](http://ASP.NET) and .NET (.NET 6 and newer). The key differentiator for YARP is that it's been designed to be easily customized and tweaked via .NET code to match the specific needs of each deployment scenario. YARP is designed with customizability as a primary scenario rather than requiring you to break out to script or rebuild the library from source.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Getting Started with YARP",
        "url": "https://microsoft.github.io/reverse-proxy/articles/getting-started.html",
        "type": "article"
      },
      {
        "title": "YARP: The .NET Reverse proxy",
        "url": "https://www.youtube.com/watch?v=1IqQkNcsqWE",
        "type": "video"
      }
    ]
  },
  "rmRESzLiZNWdBFXLrwQFJ": {
    "title": "Docker",
    "description": "Docker is a platform for developing, shipping, and running applications in containers. A container is a lightweight, standalone, and executable package of software that includes everything needed to run a piece of software, including the code, a runtime, system tools, libraries, and settings.\n\nDocker allows developers to package their applications and dependencies into a container, which can then be easily deployed and run on any host machine with Docker installed. This makes it easy to run the same software on different environments, such as development, staging, and production, without worrying about compatibility issues.s\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "ASP.NET and Docker",
        "url": "https://www.tatvasoft.com/blog/asp-net-core-and-docker/",
        "type": "article"
      },
      {
        "title": "Introduction to .NET and Docker",
        "url": "https://learn.microsoft.com/en-us/dotnet/core/docker/introduction",
        "type": "article"
      },
      {
        "title": "Explore top posts about Docker",
        "url": "https://app.daily.dev/tags/docker?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "What is Docker, Why use it?",
        "url": "https://www.youtube.com/watch?v=vmnvOITMoIg",
        "type": "video"
      }
    ]
  },
  "02rtFStTeIm8prNskxaUN": {
    "title": "Kubernetes",
    "description": "Kubernetes is an [open source](https://github.com/kubernetes/kubernetes) container management platform, and the dominant product in this space. Using Kubernetes, teams can deploy images across multiple underlying hosts, defining their desired availability, deployment logic, and scaling logic in YAML. Kubernetes evolved from Borg, an internal Google platform used to provision and allocate compute resources (similar to the Autopilot and Aquaman systems of Microsoft Azure).\n\nThe popularity of Kubernetes has made it an increasingly important skill for the DevOps Engineer and has triggered the creation of Platform teams across the industry. These Platform engineering teams often exist with the sole purpose of making Kubernetes approachable and usable for their product development colleagues.\n\nVisit the following resources to learn more:",
    "links": [
      {
        "title": "Kubernetes Website",
        "url": "https://kubernetes.io/",
        "type": "article"
      },
      {
        "title": "Kubernetes Documentation",
        "url": "https://kubernetes.io/docs/home/",
        "type": "article"
      },
      {
        "title": "Primer: How Kubernetes Came to Be, What It Is, and Why You Should Care",
        "url": "https://thenewstack.io/primer-how-kubernetes-came-to-be-what-it-is-and-why-you-should-care/",
        "type": "article"
      },
      {
        "title": "Kubernetes: An Overview",
        "url": "https://thenewstack.io/kubernetes-an-overview/",
        "type": "article"
      },
      {
        "title": "Explore top posts about Kubernetes",
        "url": "https://app.daily.dev/tags/kubernetes?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Kubernetes Crash Course for Absolute Beginners",
        "url": "https://www.youtube.com/watch?v=s_o8dwzRlu4",
        "type": "video"
      }
    ]
  },
  "HqhqqiA5X00Xl1RnZgrNJ": {
    "title": ".NET Aspire",
    "description": "",
    "links": []
  },
  "XKsLqDDco5OXKURCcWAmv": {
    "title": "Orleans",
    "description": "Orleans is an open-source virtual actor model framework for building distributed, high-scale, and low-latency applications in .NET. It is designed to make it easy to build and operate large-scale, distributed systems, such as cloud services, IoT applications, and gaming servers.\n\nOne of the key features of Orleans is its use of the virtual actor model, which is a programming model that allows developers to write concurrent and parallel code in a way that is similar to writing single-threaded code. Orleans provides a set of abstractions for building stateful actors, which are similar to objects in object-oriented programming, that can be distributed across multiple machines. These actors can communicate with each other using message passing, and can be accessed remotely using a transparent proxy\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Microsoft Orleans",
        "url": "https://learn.microsoft.com/en-us/dotnet/orleans/overview",
        "type": "article"
      },
      {
        "title": "Introduction to Orleans",
        "url": "https://dev.to/willvelida/introduction-to-microsoft-orleans-796",
        "type": "article"
      },
      {
        "title": "Building real applications with Orleans",
        "url": "https://www.youtube.com/watch?v=8duFuggnj8o",
        "type": "video"
      }
    ]
  },
  "s8evqe2MireS1UhxoXrd1": {
    "title": "SteelToe",
    "description": "Steeltoe is an open-source project that provides a set of libraries for building cloud-native applications on the .NET platform. The libraries are designed to work with the .NET Core runtime and provide a set of abstractions for common cloud-native patterns, such as service discovery, configuration management, and circuit breaking. The goal of Steeltoe is to make it easy for developers to take advantage of the cloud-native capabilities of the .NET platform and build resilient and scalable applications.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": ".NET Microservices with Steeltoe",
        "url": "https://learn.microsoft.com/en-us/shows/on-net/net-microservices-with-steeltoe",
        "type": "article"
      },
      {
        "title": "Steeltoe Documentation",
        "url": "https://docs.steeltoe.io/api/v3/welcome/index.html",
        "type": "article"
      },
      {
        "title": ".NET Microservices with Steeltoe",
        "url": "https://www.youtube.com/watch?v=QLRi6iPapVg",
        "type": "video"
      }
    ]
  },
  "IHY9uL3dzYmf2D2wWgIh-": {
    "title": "Dapr",
    "description": "Dapr (Distributed Application Runtime) is an open-source, portable runtime that makes it easy to build microservices-based applications that run on the cloud and edge. It provides a set of building blocks for building microservices, including service discovery, state management, pub-sub messaging, and more. It is designed to be language-agnostic, so it can be used with any programming language, including .NET.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Get started with Dapr",
        "url": "https://learn.microsoft.com/en-us/dotnet/architecture/dapr-for-net-developers/getting-started",
        "type": "article"
      },
      {
        "title": "Building an event-driven .NET Core app with Dapr",
        "url": "https://medium.com/polarsquad/building-an-event-driven-net-core-app-with-dapr-58cc83ab120b",
        "type": "article"
      }
    ]
  },
  "KIFmahcNiSo2NGoLtAyRR": {
    "title": "CI / CD",
    "description": "CI/CD (Continuous Integration/Continuous Deployment) is a software development practice that involves automating the process of building, testing, and deploying code changes. It is a popular practice among software development teams, as it helps to ensure that code changes are integrated, tested, and deployed quickly and reliably.\n\nIn the context of [ASP.NET](http://ASP.NET), CI/CD can be used to automate various tasks related to the development, testing, and deployment of [ASP.NET](http://ASP.NET) applications. For example, you can use CI/CD to automatically build, test, and deploy an [ASP.NET](http://ASP.NET) application to a hosting provider, such as Azure or AWS, every time you push code to your source control repository.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "How to reate a CI/CD pipeline for ASP.NET?",
        "url": "https://www.azuredevopslabs.com/labs/vstsextend/azuredevopsprojectdotnet/",
        "type": "article"
      },
      {
        "title": "Explore top posts about CI/CD",
        "url": "https://app.daily.dev/tags/cicd?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Building a CI/CD Pipeline in Azure DevOps for ASP.NET Core",
        "url": "https://youtube.com/watch?v=eOQL0nXQlLs",
        "type": "video"
      }
    ]
  },
  "0-PLMXGlRyRzTk-EjXMs2": {
    "title": "GitHub Actions",
    "description": "GitHub Actions is a powerful and flexible automation platform that enables developers to create custom workflows for their software development lifecycle (SDLC) directly in their GitHub repository. It allows developers to automate various tasks, such as building, testing, and deploying code, directly from their GitHub repository.\n\nIn [ASP.NET](http://ASP.NET), GitHub Actions can be used to automate various tasks related to the development, testing, and deployment of [ASP.NET](http://ASP.NET) applications. For example, you can use GitHub Actions to automatically build, test, and deploy an [ASP.NET](http://ASP.NET) application to a hosting provider, such as Azure or AWS, every time you push code to your GitHub repository.\n\nVisit the following links to learn more:",
    "links": [
      {
        "title": "Intro to GitHub Actions for .NET",
        "url": "https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/",
        "type": "article"
      },
      {
        "title": "Tutorial: Create a GitHub Action with .NET",
        "url": "https://learn.microsoft.com/en-us/dotnet/devops/create-dotnet-github-action",
        "type": "article"
      },
      {
        "title": "Building and testing .NET",
        "url": "https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net",
        "type": "article"
      },
      {
        "title": "Explore top posts about GitHub",
        "url": "https://app.daily.dev/tags/github?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "_-GQNpsb7KZw76hNNOq3h": {
    "title": "Azure Pipelines",
    "description": "Azure Pipelines is a continuous integration and continuous delivery (CI/CD) platform that allows developers to automate the process of building, testing, and deploying code. It is a part of the Azure DevOps suite of tools and can be used to automate the software development process for various languages and platforms, including [ASP.NET](http://ASP.NET).\n\nIn [ASP.NET](http://ASP.NET), Azure Pipelines can be used to automate various tasks related to the development, testing, and deployment of [ASP.NET](http://ASP.NET) applications. For example, you can use Azure Pipelines to automatically build, test, and deploy an [ASP.NET](http://ASP.NET) application to a hosting provider, such as Azure or AWS, every time you push code to your source control repository.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Deploy ASP.NET Apps with Azure Pipelines",
        "url": "https://learn.microsoft.com/en-us/training/modules/deploy-aspnet-apps-azure-app-service-pipelines/",
        "type": "article"
      },
      {
        "title": "Build ASP.NET apps with .NET Framework",
        "url": "https://learn.microsoft.com/en-us/azure/devops/pipelines/apps/aspnet/build-aspnet-4?view=azure-devops",
        "type": "article"
      },
      {
        "title": "How to Build, test & deploy .NET Apps",
        "url": "https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops&tabs=dotnetfive",
        "type": "article"
      },
      {
        "title": "Explore top posts about Azure",
        "url": "https://app.daily.dev/tags/azure?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "8Y73Ae32eo6_ye7dw5QRQ": {
    "title": "GitLab CI/CD",
    "description": "",
    "links": []
  },
  "KyGjXgG6JFo42qOV0wqfB": {
    "title": "Circle CI",
    "description": "CircleCI is a cloud-based continuous integration and continuous delivery (CI/CD) platform that allows developers to automate the process of building, testing, and deploying code. It is a popular platform that supports a wide range of languages and frameworks, including [ASP.NET](http://ASP.NET).\n\nIn [ASP.NET](http://ASP.NET), CircleCI can be used to automate various tasks related to the development, testing, and deployment of [ASP.NET](http://ASP.NET) applications. For example, you can use CircleCI to automatically build, test, and deploy an [ASP.NET](http://ASP.NET) application to a hosting provider, such as Azure or AWS, every time you push code to your source control repository.\n\nVisit the following links to learn more:",
    "links": [
      {
        "title": "How to Setup CircleCI for ASP.NET project",
        "url": "https://discuss.circleci.com/t/setup-circleci-for-asp-net-project/33796s",
        "type": "article"
      },
      {
        "title": "Building and testing an ASP.NET apps with CircleCI",
        "url": "https://circleci.com/blog/building-and-testing-an-asp-net-core-application/",
        "type": "article"
      },
      {
        "title": "Explore top posts about CI/CD",
        "url": "https://app.daily.dev/tags/cicd?ref=roadmapsh",
        "type": "article"
      }
    ]
  },
  "C85aJvrzj6rP2Hmfj9uPB": {
    "title": "Template Engines",
    "description": "Template engines in [ASP.NET](http://ASP.NET) are libraries that allow developers to embed dynamic data in HTML templates. These engines are used to separate the logic of the application from the presentation of the data, making it easy to change the appearance of the application without having to change the underlying code.\n\nTo learn more, visit the followin link:",
    "links": [
      {
        "title": "Template Engine in ASP.NET",
        "url": "https://ej2.syncfusion.com/aspnetmvc/documentation/common/template-engine",
        "type": "article"
      },
      {
        "title": "How to to Create Custom Templates using the .Net Template Engine ",
        "url": "https://www.infoq.com/articles/dotnet-core-template-engine/",
        "type": "article"
      }
    ]
  },
  "nUE2-egUMNFQoPVrVRFPl": {
    "title": "Razor",
    "description": "Razor is a markup syntax for embedding server-side code in web pages. It was introduced with [ASP.NET](http://ASP.NET) MVC 3 and later became a part of [ASP.NET](http://ASP.NET) Web Pages. It allows developers to write server-side code using C# or Visual Basic and embed it in HTML markup. Its syntax is designed to be compact and easy to read. It provides a rich set of features for building web applications, such as a component model for building reusable UI, a routing system for navigation, and support for dependency injection, it also allows you to use the same libraries, frameworks, and tools that you're already familiar with from building traditional [ASP.NET](http://ASP.NET) web applications.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Complete Guide to ASP.NET Razor",
        "url": "https://w3schools.com/asp/razor_intro.asp",
        "type": "article"
      },
      {
        "title": "Introduction to ASP.NET Web Programming Using Razor",
        "url": "https://learn.microsoft.com/en-us/aspnet/web-pages/overview/getting-started/introducing-razor-syntax-c",
        "type": "article"
      },
      {
        "title": "An Introduction To Razor",
        "url": "https://khalidabuhakmeh.com/what-is-razor-aspnet",
        "type": "article"
      }
    ]
  },
  "dWB5OCvWVYkD30Op_dMwy": {
    "title": "Scriban",
    "description": "Scriban is an open-source, lightweight template engine for .NET that is based on the Lua programming language. It is designed to be simple and easy to use, while still providing a powerful set of features for creating and manipulating templates. It provides a simple and easy-to-use API for parsing and rendering templates, and supports a wide range of features such as variables, loops, conditionals, and functions. It also provides a wide range of built-in functions for working with strings, numbers, dates, and other types of data, and also supports advanced features such as scripting and metaprogramming.\n\nVisit the following links to learn more about Scriban:",
    "links": [
      {
        "title": "Guide to Scriban in ASP.NET",
        "url": "https://github.com/scriban/scriban",
        "type": "opensource"
      },
      {
        "title": "Introduction to Scriban",
        "url": "https://www.markvanaalst.com/blog/sxa/sxa-9-3-introducing-scriban/",
        "type": "article"
      }
    ]
  },
  "ZaOhWWDgVxrn0hbesJ7xT": {
    "title": "Fluid",
    "description": "Fluid is a template engine for .NET that is based on the Fluid template language, it is similar to Liquid, but it's written in C#. It provides a simple and easy-to-use API for parsing and rendering templates, and supports a wide range of features such as variables, loops, conditionals, and functions. It also provides a wide range of built-in functions for working with strings, numbers, dates, and other types of data. It also supports advanced features such as scripting and metaprogramming. It is often used in web applications to separate the logic of the application from the presentation of the data, making it easy to change the appearance of the application without having to change the underlying code.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Overview of Fluid",
        "url": "https://github.com/sebastienros/fluid",
        "type": "opensource"
      }
    ]
  },
  "1YL7aXluINOO15W3waaiD": {
    "title": "Frameworks",
    "description": "",
    "links": []
  },
  "4iD_hDtgJ15IlJGxiO-E8": {
    "title": "Blazor",
    "description": "Blazor is a framework for building web applications using C# and .NET that runs in the browser via WebAssembly. It allows developers to write C# code that runs directly in the browser, eliminating the need for JavaScript.\n\nBlazor comes in two flavors:\n\n*   Blazor WebAssembly, a client-side solution that allows you to run C# code directly in the browser using WebAssembly. The app is executed on the client-side and can work offline, it can also interact with JavaScript and access the browser's DOM.\n*   Blazor Server, a server-side solution that allows you to run C# code on the server and update the UI in real-time. The app is executed on the server-side and requires an active connection to the server to function.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "Guide to ASP.NET Core Blazor",
        "url": "https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-7.0",
        "type": "article"
      },
      {
        "title": "What Is Blazor And How It Works?",
        "url": "https://www.c-sharpcorner.com/article/what-is-blazor-and-how-does-it-works/",
        "type": "article"
      },
      {
        "title": "Explore top posts about Blazor",
        "url": "https://app.daily.dev/tags/blazor?ref=roadmapsh",
        "type": "article"
      },
      {
        "title": "Tutorial of ASP.NET Core Blazor",
        "url": "https://www.youtube.com/watch?v=LyO4zj6NRuc",
        "type": "video"
      }
    ]
  },
  "olqSPUU3RoxhQ6exfMzeN": {
    "title": ".NET MAUI",
    "description": "",
    "links": []
  },
  "Zb4Gugxf7d6MoeEcfngrV": {
    "title": "Scalar",
    "description": "",
    "links": []
  },
  "cc0UNQwbDlySue-CvpChR": {
    "title": "MediatR",
    "description": "MediatR is an open-source library for .NET that is designed to simplify the process of handling messages and commands in a clean, decoupled manner. It's particularly useful in applications that use the Command-Query Responsibility Segregation (CQRS) pattern and event-driven architecture. It provides a simple and easy-to-use API for handling messages, and supports the concept of pipelines, which allow you to add additional behavior to message handling, such as logging, validation, and exception handling.\n\nFor more information, visit the following links:",
    "links": [
      {
        "title": "Use MediatR in ASP.NET or ASP.NET Core",
        "url": "https://medium.com/dotnet-hub/use-mediatr-in-asp-net-or-asp-net-core-cqrs-and-mediator-in-dotnet-how-to-use-mediatr-cqrs-aspnetcore-5076e2f2880c",
        "type": "article"
      },
      {
        "title": "How to implement CQRS using MediatR in an ASP.NET?",
        "url": "https://christian-schou.dk/blog/how-to-implement-cqrs-with-mediatr-in-asp-net/",
        "type": "article"
      }
    ]
  },
  "sa0zXd8lpNs_SFQ2y-PY4": {
    "title": "FluentValidation",
    "description": "FluentValidation is an open-source library for .NET that provides a fluent, easy-to-use API for validating domain models. It allows developers to define validation rules using a fluent, chainable syntax. It separates validation rules into separate classes called validators, it supports async validation, custom validation rules, and cascading validation. It makes it easy to read and understand the validation logic, and it returns a ValidationResult object, which contains information about any validation errors that were found.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Documentations of FluentValidation",
        "url": "https://docs.fluentvalidation.net/en/latest/",
        "type": "article"
      },
      {
        "title": "FluentValidation in ASP.NET Core",
        "url": "https://docs.fluentvalidation.net/en/latest/aspnet.html",
        "type": "article"
      },
      {
        "title": "Overview of FluentValidation in ASP.NET Core",
        "url": "https://code-maze.com/fluentvalidation-in-aspnet/",
        "type": "article"
      }
    ]
  },
  "gQhiEpvx__70N1WbEHGYJ": {
    "title": "Polly",
    "description": "Polly is an open-source library for .NET that provides a simple and flexible API for handling transient faults and other types of errors that occur during the execution of a service. It allows developers to define a set of policies, such as retry, circuit breaker, and timeout, that can be used to handle specific types of errors and improve the resiliency of the service. It provides a fluent API that makes it easy to define and configure policies, supports advanced features such as async and sync execution, fallback policies, and policy wrapping. Additionally, it allows to specify the exception type that is thrown and it would trigger the policy.\n\nTo learn more, visit the following resources:",
    "links": [
      {
        "title": "Using Polly for .NET Resilience",
        "url": "https://www.telerik.com/blogs/using-polly-for-net-resilience-and-transient-fault-handling-with-net-core",
        "type": "article"
      },
      {
        "title": "Build Resilient Microservices Using Polly In ASP.NET",
        "url": "https://procodeguide.com/programming/polly-in-aspnet-core/",
        "type": "article"
      }
    ]
  },
  "ipb6proIZKG-_vCOMAiBu": {
    "title": "Marten",
    "description": "",
    "links": []
  },
  "EsC1JwFOMOlQVelpmxISh": {
    "title": "Nuke",
    "description": "NUKE (Build Automation for .NET) is an open-source build automation tool for .NET projects. It is designed to be simple, flexible, and extensible, making it easy to automate the build, test, and deployment process of your .NET projects.\n\nNUKE allows you to define your build process using a simple, declarative syntax, making it easy to understand and maintain. It provides a set of built-in tasks for common build actions, such as compiling, testing, and publishing, as well as a powerful extensibility model that allows you to add custom tasks and scripts.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "How to Build Automation with NUKE",
        "url": "https://learn.microsoft.com/en-us/shows/on-net/build-automation-with-nuke",
        "type": "article"
      },
      {
        "title": "Automate your .NET project builds with NUKE",
        "url": "https://laurentkempe.com/2022/02/02/automate-your-dotnet-project-builds-with-nuke-a-cross-platform-build-automation-solution/",
        "type": "article"
      }
    ]
  },
  "9LEVN-uVEwxJooEiB9ApK": {
    "title": "Benchmark.NET",
    "description": "BenchmarkDotNet is an open-source library for .NET that provides a simple and easy-to-use API for benchmarking the performance of code. It allows you to measure the performance of methods, classes, and entire assemblies, and provides a rich set of features for analyzing and comparing the results. It provides a wide range of performance metrics, such as CPU cycles, memory allocation, and garbage collection, and can generate detailed reports that include charts, tables, and source code highlighting. It has support for multithreading and a built-in support for .NET Core.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": "Benchmarking .NET Using BenchmarkDotNet",
        "url": "https://www.codemag.com/Article/2209061/Benchmarking-.NET-6-Applications-Using-BenchmarkDotNet-A-Deep-Dive",
        "type": "article"
      },
      {
        "title": "Benchmarking ASP.NET Applications with .NET Crank",
        "url": "https://www.youtube.com/watch?v=2IgfrnG-128",
        "type": "video"
      },
      {
        "title": "Intro to BenchmarkDotNet",
        "url": "https://www.youtube.com/watch?v=mmza9x3QxYE",
        "type": "video"
      }
    ]
  },
  "T2FsSndxzSuKTFdjoyPi-": {
    "title": "Distributed Lock",
    "description": "",
    "links": []
  },
  "236VJJjMvqHfSj-MHSDPV": {
    "title": "MSTest",
    "description": "MSTest is a unit testing framework for the .NET framework, it's one of the built-in test frameworks in Visual Studio and it's widely used for unit testing in the .NET ecosystem. In the context of [ASP.NET](http://ASP.NET), MSTest can be used to write unit tests for web applications built using the [ASP.NET](http://ASP.NET) framework. MSTest provides features such as data-driven testing, parallel test execution, and test discovery and execution, it also provides the ability to run tests on multiple frameworks.\n\nTo learn more, visit the following links:",
    "links": [
      {
        "title": ".NET Core testing with MSTest",
        "url": "https://www.oreilly.com/library/view/c-and-net/9781788292481/aa08c601-f374-4e31-be8e-8eb69d63bd19.xhtml",
        "type": "article"
      },
      {
        "title": "Unit testing with MSTest and .NET",
        "url": "https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest",
        "type": "article"
      },
      {
        "title": "Complete Guide of MSTest for Unit Testing in ASP.NET",
        "url": "https://sweetcode.io/a-complete-guide-of-mstest-for-unit-testing-in-asp-net/",
        "type": "article"
      }
    ]
  }
}